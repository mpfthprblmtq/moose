/*
 *  Proj:   Moose
 *  File:   AuditFrame.java
 *  Desc:   Main UI class for the JFrame containing the Audit/Cleanup functionality.
 *          Works with the AuditController and CleanupController to clean and audit directories,
 *          this class just handles all the UI interactions.
 *
 *  Copyright Pat Ripley (mpfthprblmtq) 2018-2023
 */

// package
package com.mpfthprblmtq.moose.views.modals;

// imports
import com.mpfthprblmtq.commons.utils.FileUtils;
import com.mpfthprblmtq.commons.utils.StringUtils;
import com.mpfthprblmtq.moose.Moose;
import com.mpfthprblmtq.moose.controllers.AuditController;
import com.mpfthprblmtq.moose.controllers.CleanupController;
import com.mpfthprblmtq.moose.utilities.Constants;
import com.mpfthprblmtq.moose.utilities.IconUtils;

import java.awt.Font;
import java.io.File;
import java.util.List;
import java.util.Objects;
import javax.swing.*;

import static com.mpfthprblmtq.moose.utilities.Constants.*;

// class AuditFrame
@SuppressWarnings("FieldCanBeLocal")    // for NetBeans' field declaration at bottom of class
public class AuditFrame extends javax.swing.JFrame {

    // controllers
    public AuditController auditController;
    public CleanupController cleanupController;

    /**
     * Creates new form AuditFrame
     */
    public AuditFrame() {
        initComponents();

        // initialize the controllers
        auditController = new AuditController();
        cleanupController = new CleanupController();

        init();
    }

    /**
     * Custom init, just sets the path label to the user's library location if we have it
     */
    private void init() {
        pathLabel.setText(populatePathLabel());
    }

    /**
     * Accessible method to set the audit status to loading, just sets the loading icon on the audit tab
     * @param loading a boolean to determine if we need to set the loading icon
     */
    public void setAuditLoading(boolean loading) {
        auditLoadingLabel.setIcon(loading ? IconUtils.get(IconUtils.LOADING) : null);
    }

    /**
     * Accessible method to set the cleanup status to loading, just sets the loading icon on the cleanup tab
     * @param loading a boolean to determine if we need to set the loading icon
     */
    public void setCleanupLoading(boolean loading) {
        cleanupLoadingLabel.setIcon(loading ? IconUtils.get(IconUtils.LOADING) : null);
    }

    /**
     * Accessible method to set the text on the audit results text area
     * @param results the results to set on the text area
     */
    public void setAuditResults(String results) {
        auditResultsTextArea.setText(results);
    }

    /**
     * Accessible method to set the text on the cleanup results text area
     * @param results the results to set on the text area
     */
    public void setCleanupResults(String results) {
        cleanupResultsTextArea.setText(results);
    }

    /**
     * Function to get the folder to audit/cleanup. Sets the folder field in the auditController and cleanupController.
     */
    public void chooseFolder() {

        // choose a folder
        File folder = Objects.requireNonNull(FileUtils.launchJFileChooser(
                "Select a folder to audit/cleanup",
                "Select",
                JFileChooser.DIRECTORIES_ONLY,
                false,
                null,
                null))[0];

        if (folder != null) {
            // set the file ivar in the controllers
            auditController.setFolder(folder);
            cleanupController.setFolder(folder);

            // update some graphics
            label1.setEnabled(true);
            pathLabel.setText(folder.getPath());
            resetAuditFrame();
        }
        // else nothing was chosen
    }

    /**
     * Populates the path label with the one in settings, or nothing if it's not there
     */
    public String populatePathLabel() {
        if (Moose.getSettings().getLibraryLocation().isEmpty()) {
            return StringUtils.EMPTY;
        } else {
            auditController.setFolder(new File(Moose.getSettings().getLibraryLocation()));
            cleanupController.setFolder(new File(Moose.getSettings().getLibraryLocation()));
            label1.setEnabled(true);

            auditAnalyzeButton.setEnabled(true);
            cleanupAnalyzeButton.setEnabled(true);

            return Moose.getSettings().getLibraryLocation();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("all") // for the everything
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        auditPanel = new javax.swing.JPanel();
        auditProgressBar = new javax.swing.JProgressBar();
        auditCurrentlyScanningLabel = new javax.swing.JLabel();
        previousFolderButton = new javax.swing.JButton();
        nextFolderButton = new javax.swing.JButton();
        attemptAutoFixButton = new javax.swing.JButton();
        ID3TagCheck = new javax.swing.JLabel();
        filenameCheck = new javax.swing.JLabel();
        coverArtCheck = new javax.swing.JLabel();
        label3 = new javax.swing.JLabel();
        label4 = new javax.swing.JLabel();
        label5 = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        auditAnalyzeButton = new javax.swing.JButton();
        auditStartButton = new javax.swing.JButton();
        auditViewResultsButton = new javax.swing.JButton();
        currentDirLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        auditResultsTextArea = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        advanceOnAutoFixCheckbox = new javax.swing.JCheckBox();
        auditLoadingLabel = new javax.swing.JLabel();
        cleanupPanel = new javax.swing.JPanel();
        cleanupCurrentlyScanningLabel = new javax.swing.JLabel();
        cleanupProgressBar = new javax.swing.JProgressBar();
        cleanupAnalyzeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cleanupResultsTextArea = new javax.swing.JTextArea();
        mp3asdCheckBox = new javax.swing.JCheckBox();
        wavCheckBox = new javax.swing.JCheckBox();
        flacCheckBox = new javax.swing.JCheckBox();
        zipCheckBox = new javax.swing.JCheckBox();
        windowsCheckBox = new javax.swing.JCheckBox();
        everythingElseCheckBox = new javax.swing.JCheckBox();
        imagesCheckBox = new javax.swing.JCheckBox();
        cleanupViewResultsButton = new javax.swing.JButton();
        deleteAllButton = new javax.swing.JButton();
        deleteSelectedButton = new javax.swing.JButton();
        customFileExtensionCheckBox = new javax.swing.JCheckBox();
        customFileExtensionTextField = new javax.swing.JTextField();
        customFileExtensionLabel = new javax.swing.JLabel();
        customFileExtensionPrefixLabel = new javax.swing.JLabel();
        cleanupLoadingLabel = new javax.swing.JLabel();
        chooseFolderButton = new javax.swing.JButton();
        pathLabel = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Audit Music");
        setResizable(false);

        tabbedPane.setForeground(new java.awt.Color(1, 1, 1));

        auditCurrentlyScanningLabel.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        auditCurrentlyScanningLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        auditCurrentlyScanningLabel.setToolTipText("");
        auditCurrentlyScanningLabel.setMaximumSize(new java.awt.Dimension(400, 15));
        auditCurrentlyScanningLabel.setMinimumSize(new java.awt.Dimension(400, 15));
        auditCurrentlyScanningLabel.setPreferredSize(new java.awt.Dimension(400, 15));

        previousFolderButton.setText("<-- Previous");
        previousFolderButton.setEnabled(false);
        previousFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousFolderButtonActionPerformed(evt);
            }
        });

        nextFolderButton.setText("Save & Next -->");
        nextFolderButton.setEnabled(false);
        nextFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFolderButtonActionPerformed(evt);
            }
        });

        attemptAutoFixButton.setText("Attempt Auto Fix");
        attemptAutoFixButton.setEnabled(false);
        attemptAutoFixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attemptAutoFixButtonActionPerformed(evt);
            }
        });

        ID3TagCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        filenameCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        coverArtCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        label3.setText("Every file has necessary ID3Tag information");
        label3.setEnabled(false);

        label4.setText("File names and directories all match standard");
        label4.setEnabled(false);

        label5.setText("Has cover art associated with the folder");
        label5.setEnabled(false);

        label2.setText("Current Folder:");
        label2.setEnabled(false);

        auditAnalyzeButton.setText("Perform Analysis");
        auditAnalyzeButton.setEnabled(false);
        auditAnalyzeButton.setMaximumSize(new java.awt.Dimension(150, 40));
        auditAnalyzeButton.setMinimumSize(new java.awt.Dimension(150, 40));
        auditAnalyzeButton.setPreferredSize(new java.awt.Dimension(150, 40));
        auditAnalyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                auditAnalyzeButtonActionPerformed(evt);
            }
        });

        auditStartButton.setText("Start Audit");
        auditStartButton.setEnabled(false);
        auditStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                auditStartButtonActionPerformed(evt);
            }
        });

        auditViewResultsButton.setText("View Results");
        auditViewResultsButton.setEnabled(false);
        auditViewResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                auditViewResultsButtonActionPerformed(evt);
            }
        });

        currentDirLabel.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        currentDirLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        currentDirLabel.setText(" ");
        currentDirLabel.setMaximumSize(new java.awt.Dimension(17, 339));
        currentDirLabel.setMinimumSize(new java.awt.Dimension(17, 339));
        currentDirLabel.setPreferredSize(new java.awt.Dimension(17, 339));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(175, 89));

        auditResultsTextArea.setEditable(false);
        auditResultsTextArea.setColumns(20);
        auditResultsTextArea.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        auditResultsTextArea.setRows(5);
        auditResultsTextArea.setMaximumSize(new java.awt.Dimension(175, 244));
        auditResultsTextArea.setMinimumSize(new java.awt.Dimension(175, 244));
        jScrollPane2.setViewportView(auditResultsTextArea);

        advanceOnAutoFixCheckbox.setText("Advance on successful Autofix");
        advanceOnAutoFixCheckbox.setEnabled(false);

        auditLoadingLabel.setMaximumSize(new java.awt.Dimension(20, 20));
        auditLoadingLabel.setMinimumSize(new java.awt.Dimension(20, 20));
        auditLoadingLabel.setPreferredSize(new java.awt.Dimension(20, 20));
        auditLoadingLabel.setSize(new java.awt.Dimension(20, 20));

        javax.swing.GroupLayout auditPanelLayout = new javax.swing.GroupLayout(auditPanel);
        auditPanel.setLayout(auditPanelLayout);
        auditPanelLayout.setHorizontalGroup(
            auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(auditPanelLayout.createSequentialGroup()
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(auditPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(auditPanelLayout.createSequentialGroup()
                                .addComponent(coverArtCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(auditPanelLayout.createSequentialGroup()
                                .addComponent(ID3TagCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(auditPanelLayout.createSequentialGroup()
                                .addComponent(filenameCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(currentDirLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(auditPanelLayout.createSequentialGroup()
                                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(auditAnalyzeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(auditStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(auditViewResultsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(label2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(auditPanelLayout.createSequentialGroup()
                                .addComponent(auditLoadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(auditProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(auditCurrentlyScanningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, auditPanelLayout.createSequentialGroup()
                        .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(auditPanelLayout.createSequentialGroup()
                                .addComponent(previousFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(advanceOnAutoFixCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(attemptAutoFixButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nextFolderButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        auditPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {nextFolderButton, previousFolderButton});

        auditPanelLayout.setVerticalGroup(
            auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, auditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(auditCurrentlyScanningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(auditLoadingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(auditProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(auditPanelLayout.createSequentialGroup()
                        .addComponent(auditAnalyzeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(auditViewResultsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(auditStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(label2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, auditPanelLayout.createSequentialGroup()
                        .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ID3TagCheck, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filenameCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(coverArtCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attemptAutoFixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(advanceOnAutoFixCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(previousFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        auditPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {attemptAutoFixButton, nextFolderButton, previousFolderButton});

        tabbedPane.addTab("Audit", auditPanel);

        cleanupCurrentlyScanningLabel.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        cleanupCurrentlyScanningLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cleanupCurrentlyScanningLabel.setToolTipText("");
        cleanupCurrentlyScanningLabel.setMaximumSize(new java.awt.Dimension(400, 16));
        cleanupCurrentlyScanningLabel.setMinimumSize(new java.awt.Dimension(400, 16));
        cleanupCurrentlyScanningLabel.setPreferredSize(new java.awt.Dimension(400, 16));

        cleanupAnalyzeButton.setText("Perform Analysis");
        cleanupAnalyzeButton.setEnabled(false);
        cleanupAnalyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanupAnalyzeButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setToolTipText("");

        cleanupResultsTextArea.setEditable(false);
        cleanupResultsTextArea.setColumns(20);
        cleanupResultsTextArea.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        cleanupResultsTextArea.setRows(5);
        cleanupResultsTextArea.setWrapStyleWord(true);
        cleanupResultsTextArea.setEnabled(false);
        jScrollPane1.setViewportView(cleanupResultsTextArea);

        mp3asdCheckBox.setText(".mp3.asd");
        mp3asdCheckBox.setEnabled(false);
        mp3asdCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mp3asdCheckBoxStateChanged(evt);
            }
        });

        wavCheckBox.setText(".wav");
        wavCheckBox.setEnabled(false);
        wavCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                wavCheckBoxStateChanged(evt);
            }
        });

        flacCheckBox.setText(".flac");
        flacCheckBox.setEnabled(false);
        flacCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                flacCheckBoxStateChanged(evt);
            }
        });

        zipCheckBox.setText(".zip");
        zipCheckBox.setEnabled(false);
        zipCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zipCheckBoxStateChanged(evt);
            }
        });

        windowsCheckBox.setText("Windows files");
        windowsCheckBox.setEnabled(false);
        windowsCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                windowsCheckBoxStateChanged(evt);
            }
        });

        everythingElseCheckBox.setText("Other files");
        everythingElseCheckBox.setEnabled(false);
        everythingElseCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                everythingElseCheckBoxStateChanged(evt);
            }
        });

        imagesCheckBox.setText("Images (Excludes cover art images, e.g. cover.*)");
        imagesCheckBox.setEnabled(false);
        imagesCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imagesCheckBoxStateChanged(evt);
            }
        });

        cleanupViewResultsButton.setText("View Results");
        cleanupViewResultsButton.setEnabled(false);
        cleanupViewResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanupViewResultsButtonActionPerformed(evt);
            }
        });

        deleteAllButton.setText("Delete All");
        deleteAllButton.setEnabled(false);
        deleteAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllButtonActionPerformed(evt);
            }
        });

        deleteSelectedButton.setText("Delete Selected");
        deleteSelectedButton.setEnabled(false);
        deleteSelectedButton.setMaximumSize(new java.awt.Dimension(97, 40));
        deleteSelectedButton.setMinimumSize(new java.awt.Dimension(97, 40));
        deleteSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedButtonActionPerformed(evt);
            }
        });

        customFileExtensionCheckBox.setEnabled(false);
        customFileExtensionCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                customFileExtensionCheckBoxStateChanged(evt);
            }
        });

        customFileExtensionTextField.setEnabled(false);

        customFileExtensionLabel.setText("Custom file extension");
        customFileExtensionLabel.setEnabled(false);

        customFileExtensionPrefixLabel.setText("*.");
        customFileExtensionPrefixLabel.setEnabled(false);

        javax.swing.GroupLayout cleanupPanelLayout = new javax.swing.GroupLayout(cleanupPanel);
        cleanupPanel.setLayout(cleanupPanelLayout);
        cleanupPanelLayout.setHorizontalGroup(
            cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cleanupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imagesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(cleanupPanelLayout.createSequentialGroup()
                        .addComponent(flacCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zipCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(everythingElseCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(cleanupPanelLayout.createSequentialGroup()
                        .addGroup(cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cleanupPanelLayout.createSequentialGroup()
                                .addGroup(cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cleanupAnalyzeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cleanupViewResultsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1))
                            .addGroup(cleanupPanelLayout.createSequentialGroup()
                                .addComponent(wavCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mp3asdCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(windowsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(cleanupPanelLayout.createSequentialGroup()
                                .addComponent(customFileExtensionCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(customFileExtensionPrefixLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(customFileExtensionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(customFileExtensionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cleanupPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(deleteAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteSelectedButton, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cleanupPanelLayout.createSequentialGroup()
                        .addComponent(cleanupLoadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cleanupProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(cleanupCurrentlyScanningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        cleanupPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteAllButton, deleteSelectedButton});

        cleanupPanelLayout.setVerticalGroup(
            cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cleanupPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(cleanupCurrentlyScanningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cleanupLoadingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cleanupProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cleanupPanelLayout.createSequentialGroup()
                        .addComponent(cleanupAnalyzeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cleanupViewResultsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wavCheckBox)
                    .addComponent(windowsCheckBox)
                    .addComponent(mp3asdCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flacCheckBox)
                    .addComponent(everythingElseCheckBox)
                    .addComponent(zipCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imagesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customFileExtensionCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(cleanupPanelLayout.createSequentialGroup()
                        .addGroup(cleanupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customFileExtensionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customFileExtensionLabel)
                            .addComponent(customFileExtensionPrefixLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60)
                .addComponent(deleteSelectedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        cleanupPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deleteAllButton, deleteSelectedButton});

        tabbedPane.addTab("Cleanup", cleanupPanel);

        chooseFolderButton.setText("Choose Folder...");
        chooseFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFolderButtonActionPerformed(evt);
            }
        });

        pathLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        pathLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        label1.setText("Audit/Cleanup Folder:");
        label1.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chooseFolderButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseFolderButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the chooseFolder button press. Calls the chooseFolder method, then checks if we have a valid folder
     * and enables the analyze buttons based on that.
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void chooseFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFolderButtonActionPerformed
        chooseFolder();
        if(auditController.getFolder() != null) {
            auditAnalyzeButton.setEnabled(true);
            cleanupAnalyzeButton.setEnabled(true);
        }
    }//GEN-LAST:event_chooseFolderButtonActionPerformed

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //  AUDIT METHODS
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // <editor-fold defaultstate="collapsed" desc="AUDIT">

    /**
     * Handles the analyze button press for audit
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void auditAnalyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_auditAnalyzeButtonActionPerformed
        startAuditAnalysis();
    }//GEN-LAST:event_auditAnalyzeButtonActionPerformed

    public void startAuditAnalysis() {
        // make a swing worker do the analysis in a separate thread, so I can update the GUI
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() {
                // update graphics
                auditAnalyzeButton.setEnabled(false);
                auditCurrentlyScanningLabel.setHorizontalAlignment(SwingConstants.LEADING);
                auditCurrentlyScanningLabel.setText("Importing albums...");

                // do analysis
                auditController.analyze();

                // update graphics again
                auditViewResultsButton.setEnabled(true);    // enable the buttons used for audit now that we have results
                auditStartButton.setEnabled(true);
                return null;    // don't return anything since we're just playing with threads
            }
        };

        // e x e c u t e
        worker.execute();
    }

    /**
     * Handles the audit view results button press
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void auditViewResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_auditViewResultsButtonActionPerformed
        viewResults(Constants.AUDIT);
    }//GEN-LAST:event_auditViewResultsButtonActionPerformed

    /**
     * Handles the start audit button press
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void auditStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_auditStartButtonActionPerformed
        if (auditStartButton.getText().equals("Start Audit")) {
            startAudit();
        } else if (auditStartButton.getText().equals("Stop Audit")) {
            auditController.stopAudit(false);
        }
    }//GEN-LAST:event_auditStartButtonActionPerformed

    /**
     * Starts the audit, updates graphics beforehand
     */
    private void startAudit() {
        // update graphics
        auditAnalyzeButton.setEnabled(false);
        chooseFolderButton.setEnabled(false);
        auditViewResultsButton.setEnabled(true);
        nextFolderButton.setEnabled(true);
        previousFolderButton.setEnabled(true);
        auditStartButton.setText("Stop Audit");
        label3.setEnabled(true);
        label4.setEnabled(true);
        label5.setEnabled(true);
        cleanupAnalyzeButton.setEnabled(false);
        cleanupViewResultsButton.setEnabled(false);
        deleteAllButton.setEnabled(false);
        deleteSelectedButton.setEnabled(false);

        // start audit
        auditController.startAudit();
    }

    /**
     * Handles the next folder/album button press
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void nextFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextFolderButtonActionPerformed
        auditController.nextFolder();
        this.toFront();
        this.requestFocus();
    }//GEN-LAST:event_nextFolderButtonActionPerformed

    /**
     * Simulates a next button press, moving on to the next album
     */
    public void next() {
        nextFolderButton.doClick();
    }

    /**
     * Handles the previous folder/album button press
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void previousFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousFolderButtonActionPerformed
        auditController.previousFolder();
        this.toFront();
        this.requestFocus();
    }//GEN-LAST:event_previousFolderButtonActionPerformed

    /**
     * Handles the attempt auto fix button press
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void attemptAutoFixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attemptAutoFixButtonActionPerformed
        auditController.autoFix();
    }//GEN-LAST:event_attemptAutoFixButtonActionPerformed

    /**
     * Returns if we should advance on autofix
     * @return if the advanceOnAutoFixCheckbox is selected
     */
    public boolean shouldAdvanceOnAutofix() {
        return advanceOnAutoFixCheckbox.isSelected();
    }

    /**
     * Refreshes the three checks and the current directory when a new album is loaded
     * @param checkResults the checks to display (ID3, covers, filenames)
     * @param currentDirectory the directory that we're currently fixing
     */
    public void refreshAuditFrameFromAudit(List<Boolean> checkResults, String currentDirectory) {

        // set the controller fields
        auditController.setFields(checkResults.get(ID3), checkResults.get(FILENAMES), checkResults.get(COVER), currentDirectory);

        // set the pass/fail icons
        ID3TagCheck.setIcon(checkResults.get(ID3) ? IconUtils.get(IconUtils.ERROR) : IconUtils.get(IconUtils.SUCCESS));
        filenameCheck.setIcon(checkResults.get(FILENAMES) ? IconUtils.get(IconUtils.ERROR) : IconUtils.get(IconUtils.SUCCESS));
        coverArtCheck.setIcon(checkResults.get(COVER) ? IconUtils.get(IconUtils.ERROR) : IconUtils.get(IconUtils.SUCCESS));

        // set the advance on auto fix checkbox enabled
        advanceOnAutoFixCheckbox.setEnabled(true);

        // set the attempt fix button to enabled if there's anything to fix
        attemptAutoFixButton.setEnabled(checkResults.get(ID3) || checkResults.get(COVER) || checkResults.get(FILENAMES));

        // update the current directory label
        currentDirLabel.setText(StringUtils.truncateWithEllipsesTrailing(currentDirectory, 64));
    }

    /**
     * Sets the next button text
     * @param text the text to set on the button
     */
    public void setNextButtonText(String text) {
        nextFolderButton.setText(text);
    }

    /**
     * Sets the horizontal alignment of the audit currently scanning label
     * @param alignment the alignment type (SwingConstants.LEADING or SwingConstants.TRAILING)
     */
    public void setAuditCurrentlyScanningLabelHorizontalAlignment(int alignment) {
        auditCurrentlyScanningLabel.setHorizontalAlignment(alignment);
    }

    /**
     * Updates the currentlyScanningLabel
     */
    public void updateAuditCurrentlyScanningLabel(String s) {
        auditCurrentlyScanningLabel.setText(s);
    }

    /**
     * Updates the audit progress bar
     * @param percentage the percentage that the bar should be filled up
     */
    public void updateAuditProgressBar(int percentage) {
        auditProgressBar.setValue(percentage);
    }

    // </editor-fold>

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //  CLEANUP METHODS
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // <editor-fold defaultstate="collapsed" desc="CLEANUP">

    /**
     * Handles the cleanup analyze button press
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void cleanupAnalyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanupAnalyzeButtonActionPerformed
        startCleanupAnalysis();
    }//GEN-LAST:event_cleanupAnalyzeButtonActionPerformed

    /**
     * Handles the delete all button press
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void deleteAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllButtonActionPerformed
        int returnVal = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to delete all extra files?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
        if (returnVal == 0) {
            cleanupController.deleteAll();
        }
    }//GEN-LAST:event_deleteAllButtonActionPerformed

    /**
     * Handles delete selected button press
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void deleteSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedButtonActionPerformed
        int returnVal = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to delete the selected extra files?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
        if (returnVal == JOptionPane.YES_OPTION) {
            cleanupController.deleteSelected(
                    mp3asdCheckBox.isSelected(),
                    flacCheckBox.isSelected(),
                    wavCheckBox.isSelected(),
                    zipCheckBox.isSelected(),
                    imagesCheckBox.isSelected(),
                    windowsCheckBox.isSelected(),
                    everythingElseCheckBox.isSelected(),
                    customFileExtensionCheckBox.isSelected() ? customFileExtensionTextField.getText() : null);
        }
    }//GEN-LAST:event_deleteSelectedButtonActionPerformed

    /**
     * Handles the view results button press
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void cleanupViewResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanupViewResultsButtonActionPerformed
        viewResults(Constants.CLEANUP);
    }//GEN-LAST:event_cleanupViewResultsButtonActionPerformed

    /**
     * Handles when the checkbox's state is changed. Sets the deletedSelected button enabled based on if at least one
     * checkbox is checked.
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void wavCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_wavCheckBoxStateChanged
        deleteSelectedButton.setEnabled(getDeleteSelectedButtonStatus());
    }//GEN-LAST:event_wavCheckBoxStateChanged

    /**
     * Handles when the checkbox's state is changed. Sets the deletedSelected button enabled based on if at least one
     * checkbox is checked.
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void flacCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_flacCheckBoxStateChanged
        deleteSelectedButton.setEnabled(getDeleteSelectedButtonStatus());
    }//GEN-LAST:event_flacCheckBoxStateChanged

    /**
     * Handles when the checkbox's state is changed. Sets the deletedSelected button enabled based on if at least one
     * checkbox is checked.
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void mp3asdCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mp3asdCheckBoxStateChanged
        deleteSelectedButton.setEnabled(getDeleteSelectedButtonStatus());
    }//GEN-LAST:event_mp3asdCheckBoxStateChanged

    /**
     * Handles when the checkbox's state is changed. Sets the deletedSelected button enabled based on if at least one
     * checkbox is checked.
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void zipCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zipCheckBoxStateChanged
        deleteSelectedButton.setEnabled(getDeleteSelectedButtonStatus());
    }//GEN-LAST:event_zipCheckBoxStateChanged

    /**
     * Handles when the checkbox's state is changed. Sets the deletedSelected button enabled based on if at least one
     * checkbox is checked.
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void windowsCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_windowsCheckBoxStateChanged
        deleteSelectedButton.setEnabled(getDeleteSelectedButtonStatus());
    }//GEN-LAST:event_windowsCheckBoxStateChanged

    /**
     * Handles when the checkbox's state is changed. Sets the deletedSelected button enabled based on if at least one
     * checkbox is checked.
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void everythingElseCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_everythingElseCheckBoxStateChanged
        deleteSelectedButton.setEnabled(getDeleteSelectedButtonStatus());
    }//GEN-LAST:event_everythingElseCheckBoxStateChanged

    /**
     * Handles when the checkbox's state is changed. Sets the deletedSelected button enabled based on if at least one
     * checkbox is checked.
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void imagesCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imagesCheckBoxStateChanged
        deleteSelectedButton.setEnabled(getDeleteSelectedButtonStatus());
    }//GEN-LAST:event_imagesCheckBoxStateChanged

    /**
     * Handles when the checkbox's state is changed. Sets the deletedSelected button enabled based on if at least one
     * checkbox is checked. This one also enables the text field and other labels too.
     * @param evt the ActionEvent (not used, but here because Netbeans)
     */
    @SuppressWarnings("unused") // for the evt param
    private void customFileExtensionCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_customFileExtensionCheckBoxStateChanged
        deleteSelectedButton.setEnabled(getDeleteSelectedButtonStatus());
        customFileExtensionTextField.setEnabled(customFileExtensionCheckBox.isSelected());
        customFileExtensionLabel.setEnabled(customFileExtensionCheckBox.isSelected());
        customFileExtensionPrefixLabel.setEnabled(customFileExtensionCheckBox.isSelected());
    }//GEN-LAST:event_customFileExtensionCheckBoxStateChanged

    /**
     * Analyzes things for cleanup
     */
    private void startCleanupAnalysis() {
        // make a swing worker do the analysis in a separate thread, so I can update the GUI
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() {
                // update graphics
                cleanupAnalyzeButton.setEnabled(false);
                cleanupViewResultsButton.setEnabled(false);

                // analyze
                cleanupController.analyze();

                // update graphics again now that we have analysis data
                cleanupViewResultsButton.setEnabled(true);
                deleteAllButton.setEnabled(true);
                cleanupResultsTextArea.setEnabled(true);
                setCleanupCheckBoxesEnabled(true);

                return null;    // don't return anything since we're just playing with threads
            }
        };

        // e x e c u t e
        worker.execute();
    }

    public void setCleanupCheckBoxesEnabled(boolean enabled) {
        if (!enabled) {
            wavCheckBox.setSelected(false);
            mp3asdCheckBox.setSelected(false);
            windowsCheckBox.setSelected(false);
            flacCheckBox.setSelected(false);
            zipCheckBox.setSelected(false);
            everythingElseCheckBox.setSelected(false);
            imagesCheckBox.setSelected(false);
            customFileExtensionCheckBox.setSelected(false);
            customFileExtensionTextField.setText(StringUtils.EMPTY);
        }

        mp3asdCheckBox.setEnabled(enabled);
        flacCheckBox.setEnabled(enabled);
        wavCheckBox.setEnabled(enabled);
        zipCheckBox.setEnabled(enabled);
        windowsCheckBox.setEnabled(enabled);
        everythingElseCheckBox.setEnabled(enabled);
        imagesCheckBox.setEnabled(enabled);
        customFileExtensionCheckBox.setEnabled(enabled);
    }

    /**
     * Checks to see if the deleteSelectedButton should be set enabled
     *
     * @return the result of the check
     */
    public boolean getDeleteSelectedButtonStatus() {
        return (wavCheckBox.isSelected()
                || flacCheckBox.isSelected()
                || mp3asdCheckBox.isSelected()
                || zipCheckBox.isSelected()
                || windowsCheckBox.isSelected()
                || imagesCheckBox.isSelected()
                || everythingElseCheckBox.isSelected()
                || customFileExtensionCheckBox.isSelected());
    }

    /**
     * Sets the horizontal alignment of the cleanup currently scanning label
     * @param alignment the alignment type (SwingConstants.LEADING or SwingConstants.TRAILING)
     */
    public void setCleanupCurrentlyScanningLabelHorizontalAlignment(int alignment) {
        cleanupCurrentlyScanningLabel.setHorizontalAlignment(alignment);
    }

    /**
     * Updates the currentlyScanningLabel
     */
    public void updateCleanupCurrentlyScanningLabel(String s) {
        cleanupCurrentlyScanningLabel.setText(s);
    }

    /**
     * Updates the cleanup progress bar
     * @param percentage the percentage that the bar should be filled up
     */
    public void updateCleanupProgressBar(int percentage) {
        cleanupProgressBar.setValue(percentage);
    }

    // </editor-fold>

    /**
     * Shows the result of the audit or cleanup
     * @param type the type of results needed, either AUDIT or CLEANUP
     */
    public void viewResults(int type) {
        if (type == Constants.AUDIT) {
            JOptionPane.showMessageDialog(null, buildResultsPanel(Constants.AUDIT),
                    "Audit Analysis Results", JOptionPane.PLAIN_MESSAGE);
        } else if (type == Constants.CLEANUP) {
            JOptionPane.showMessageDialog(null, buildResultsPanel(Constants.CLEANUP),
                    "Cleanup Analysis Results", JOptionPane.PLAIN_MESSAGE);
        }
    }

    /**
     * Assembles the JPanel for the dialog that shows the results of a cleanup or audit
     * @param type the type of results needed (AUDIT or CLEANUP)
     * @return a fully assembled JPanel
     */
    public JPanel buildResultsPanel(int type) {

        // header JLabel
        JLabel cleanupPathLabel = new JLabel("Audit folder: " + auditController.getFolder().getPath());

        // text area
        JTextArea ta = new JTextArea(20, 100);
        ta.setEditable(false);
        ta.setFont(new Font("Monospaced", Font.PLAIN, 12));
        switch (type) {
            case Constants.AUDIT:
                ta.setText(auditController.getResults());
                break;
            case Constants.CLEANUP:
                ta.setText(cleanupController.getResults());
                break;
        }

        // add it all to a panel
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.add(cleanupPathLabel);
        panel.add(Box.createVerticalStrut(10));
        panel.add(new JScrollPane(ta));

        // return said panel
        return panel;
    }

    /**
     * Sets the audit frame back to its starting point
     */
    public void resetAuditFrame() {

        // random labels
        label1.setEnabled(false);
        label2.setEnabled(false);
        label3.setEnabled(false);
        label4.setEnabled(false);
        label5.setEnabled(false);

        // choose folder
        chooseFolderButton.setEnabled(true);

        // audit fields
        auditCurrentlyScanningLabel.setText(StringUtils.EMPTY);
        auditProgressBar.setValue(0);
        auditAnalyzeButton.setEnabled(true);
        auditStartButton.setEnabled(false);
        auditStartButton.setText("Start Audit");
        auditViewResultsButton.setEnabled(false);
        auditResultsTextArea.setText(StringUtils.EMPTY);
        ID3TagCheck.setIcon(null);
        filenameCheck.setIcon(null);
        coverArtCheck.setIcon(null);
        currentDirLabel.setText(StringUtils.EMPTY);
        previousFolderButton.setEnabled(false);
        nextFolderButton.setEnabled(false);
        attemptAutoFixButton.setEnabled(false);
        nextFolderButton.setText("Save & Next -->");
        advanceOnAutoFixCheckbox.setEnabled(false);

        // cleanup fields
        setCleanupCheckBoxesEnabled(false);
        cleanupAnalyzeButton.setEnabled(true);
        cleanupViewResultsButton.setEnabled(false);
        cleanupResultsTextArea.setText(StringUtils.EMPTY);
        deleteAllButton.setEnabled(false);
        deleteSelectedButton.setEnabled(false);
        this.toFront();
        this.requestFocus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ID3TagCheck;
    private javax.swing.JCheckBox advanceOnAutoFixCheckbox;
    private javax.swing.JButton attemptAutoFixButton;
    private javax.swing.JButton auditAnalyzeButton;
    private javax.swing.JLabel auditCurrentlyScanningLabel;
    private javax.swing.JLabel auditLoadingLabel;
    private javax.swing.JPanel auditPanel;
    private javax.swing.JProgressBar auditProgressBar;
    private javax.swing.JTextArea auditResultsTextArea;
    private javax.swing.JButton auditStartButton;
    private javax.swing.JButton auditViewResultsButton;
    private javax.swing.JButton chooseFolderButton;
    private javax.swing.JButton cleanupAnalyzeButton;
    private javax.swing.JLabel cleanupCurrentlyScanningLabel;
    private javax.swing.JLabel cleanupLoadingLabel;
    private javax.swing.JPanel cleanupPanel;
    private javax.swing.JProgressBar cleanupProgressBar;
    private javax.swing.JTextArea cleanupResultsTextArea;
    private javax.swing.JButton cleanupViewResultsButton;
    private javax.swing.JLabel coverArtCheck;
    private javax.swing.JLabel currentDirLabel;
    private javax.swing.JCheckBox customFileExtensionCheckBox;
    private javax.swing.JLabel customFileExtensionLabel;
    private javax.swing.JLabel customFileExtensionPrefixLabel;
    private javax.swing.JTextField customFileExtensionTextField;
    private javax.swing.JButton deleteAllButton;
    private javax.swing.JButton deleteSelectedButton;
    private javax.swing.JCheckBox everythingElseCheckBox;
    private javax.swing.JLabel filenameCheck;
    private javax.swing.JCheckBox flacCheckBox;
    private javax.swing.JCheckBox imagesCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    private javax.swing.JLabel label4;
    private javax.swing.JLabel label5;
    private javax.swing.JCheckBox mp3asdCheckBox;
    private javax.swing.JButton nextFolderButton;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JButton previousFolderButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JCheckBox wavCheckBox;
    private javax.swing.JCheckBox windowsCheckBox;
    private javax.swing.JCheckBox zipCheckBox;
    // End of variables declaration//GEN-END:variables
}
