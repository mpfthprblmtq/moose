/*
   Proj:   Moose
   File:   SettingsFrame.java
   Desc:   Main UI class for the JFrame containing the settings and options.
           Works with the SettingsController to load and update settings, this class just handles all the UI.

   Copyright Pat Ripley 2018
 */

// package
package com.mpfthprblmtq.moose.views.modals;

// imports
import java.awt.*;
import java.awt.event.KeyEvent;

import com.mpfthprblmtq.commons.logger.Logger;
import com.mpfthprblmtq.commons.utils.DateUtils;
import com.mpfthprblmtq.commons.utils.FileUtils;
import com.mpfthprblmtq.commons.utils.StringUtils;
import com.mpfthprblmtq.moose.Moose;
import com.mpfthprblmtq.moose.controllers.SettingsController;
import com.mpfthprblmtq.moose.objects.Settings;
import com.mpfthprblmtq.moose.utilities.Constants;
import com.mpfthprblmtq.moose.utilities.viewUtils.DialogUtils;

import java.io.File;
import java.text.ParseException;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

// class SettingsFrame
public class SettingsFrame extends javax.swing.JFrame {

    // controller
    public SettingsController settingsController;

    // logger object
    Logger logger = Moose.getLogger();

    // JList model
    DefaultListModel<String> genreListModel = new DefaultListModel<>();

    // temporary settings object, which gets sent to be updated
    Settings settings;

    // starting states
    boolean debugEdited = false;
    boolean developerModeEdited = false;
    boolean autoTaggingEdited = false;
    boolean removeCommentEdited = false;
    boolean autoCoverArtSpotifyEdited = false;
    boolean checkForNewGenresEdited = false;
    boolean albumArtFinderEdited = false;
    boolean formatFilenamesEdited = false;
    int genresDeleted = 0;

    // some html constants
    final String HTML_PREFIX = "<html><b><i>";
    final String HTML_SUFFIX = "</i></b></html>";

    /**
     * Creates new form SettingsFrame
     */
    public SettingsFrame(SettingsController sc) {
        // set field
        this.settingsController = sc;

        // set up support directory if it's not set up already
        settingsController.setUpSupportDirectory();

        // initially load the settings
        settingsController.readSettingsFile();

        // set the temp settings with the actual settings
        settings = settingsController.getSettings();

        // init the components
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("all")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        genrePanel = new javax.swing.JPanel();
        genresHeaderLabel = new javax.swing.JLabel();
        genresScrollPane = new javax.swing.JScrollPane();
        genreList = new javax.swing.JList<>();
        genreToAddLabel = new javax.swing.JLabel();
        genreTextField = new javax.swing.JTextField();
        addGenreButton = new javax.swing.JButton();
        deleteGenreButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        genreStatusLabel = new javax.swing.JLabel();
        loggingPanel = new javax.swing.JPanel();
        debuggingHeaderLabel = new javax.swing.JLabel();
        debugCheckBox = new javax.swing.JCheckBox();
        developerModeCheckBox = new javax.swing.JCheckBox();
        loggingHeaderLabel = new javax.swing.JLabel();
        openEventLogButton = new javax.swing.JButton();
        clearEventLogButton = new javax.swing.JButton();
        eventLogFileLocationLabel = new javax.swing.JLabel();
        openErrorLogButton = new javax.swing.JButton();
        clearErrorLogButton = new javax.swing.JButton();
        errorLogFileLocationLabel = new javax.swing.JLabel();
        separator1 = new javax.swing.JSeparator();
        filesPanel = new javax.swing.JPanel();
        libraryLocationHeaderLabel = new javax.swing.JLabel();
        libraryLocationField = new javax.swing.JLabel();
        libraryBrowseButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        libraryLocationHeaderLabel1 = new javax.swing.JLabel();
        libraryLocationField1 = new javax.swing.JLabel();
        appSupportOpenButton = new javax.swing.JButton();
        apiPanel = new javax.swing.JPanel();
        googleSearchEngineLabel = new javax.swing.JLabel();
        cseTextField = new javax.swing.JTextField();
        apiKeyLabel = new javax.swing.JLabel();
        apiKeyTextField = new javax.swing.JTextField();
        dateLastUsedLabel = new javax.swing.JLabel();
        dateLastUsedField = new javax.swing.JLabel();
        timesUsedTodayLabel = new javax.swing.JLabel();
        timesUsedTodayField = new javax.swing.JLabel();
        preferredCoverArtSizeLabel = new javax.swing.JLabel();
        separator2 = new javax.swing.JSeparator();
        preferredCoverArtSizeSpinner = new javax.swing.JSpinner();
        separator3 = new javax.swing.JSeparator();
        cseLabel = new javax.swing.JLabel();
        spotifyLabel = new javax.swing.JLabel();
        spotifyClientIdLabel = new javax.swing.JLabel();
        spotifyClientSecretLabel = new javax.swing.JLabel();
        spotifyClientIdTextField = new javax.swing.JTextField();
        spotifyClientSecretTextField = new javax.swing.JTextField();
        featuresPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        removeCommentCheckBox = new javax.swing.JCheckBox();
        autoCoverArtSpotifyCheckBox = new javax.swing.JCheckBox();
        genreCheckBox = new javax.swing.JCheckBox();
        autoTaggingCheckBox = new javax.swing.JCheckBox();
        albumArtFinderCheckBox = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        formatFilenamesCheckBox = new javax.swing.JCheckBox();
        statusLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        defaultButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings");
        setResizable(false);

        tabbedPane.setForeground(new java.awt.Color(1, 1, 1));

        genrePanel.setEnabled(false);

        genresHeaderLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        genresHeaderLabel.setText("Genres:");

        genreList.setModel(getGenreListModel());
        genreList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        genreList.setMaximumSize(new java.awt.Dimension(200, 300));
        genreList.setMinimumSize(new java.awt.Dimension(200, 300));
        genreList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                genreListMouseClicked(evt);
            }
        });
        genresScrollPane.setViewportView(genreList);

        genreToAddLabel.setText("Genre to add:");

        genreTextField.setMaximumSize(new java.awt.Dimension(167, 26));
        genreTextField.setMinimumSize(new java.awt.Dimension(167, 26));
        genreTextField.setPreferredSize(new java.awt.Dimension(167, 26));
        genreTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                genreTextFieldKeyPressed(evt);
            }
        });

        addGenreButton.setText("Add");
        addGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGenreButtonActionPerformed(evt);
            }
        });

        deleteGenreButton.setText("Delete");
        deleteGenreButton.setEnabled(false);
        deleteGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGenreButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        genreStatusLabel.setText(" ");

        javax.swing.GroupLayout genrePanelLayout = new javax.swing.GroupLayout(genrePanel);
        genrePanel.setLayout(genrePanelLayout);
        genrePanelLayout.setHorizontalGroup(
            genrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genrePanelLayout.createSequentialGroup()
                .addGroup(genrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(genrePanelLayout.createSequentialGroup()
                        .addGroup(genrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(genrePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(genresHeaderLabel))
                            .addComponent(genreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, genrePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(genrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addGenreButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteGenreButton, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(genrePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(genrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genreToAddLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(genreStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genresScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        genrePanelLayout.setVerticalGroup(
            genrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genrePanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(genrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genresScrollPane)
                    .addGroup(genrePanelLayout.createSequentialGroup()
                        .addComponent(genresHeaderLabel)
                        .addGap(34, 34, 34)
                        .addComponent(genreToAddLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addGenreButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteGenreButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addComponent(genreStatusLabel)))
                .addContainerGap())
        );

        tabbedPane.addTab("Genres", genrePanel);

        debuggingHeaderLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        debuggingHeaderLabel.setText("Debugging");

        debugCheckBox.setSelected(settingsController.getSettings().isInDebugMode());
        debugCheckBox.setText("Enhanced Debugging");
        debugCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugCheckBoxActionPerformed(evt);
            }
        });

        developerModeCheckBox.setSelected(this.settingsController.getSettings().isInDeveloperMode());
        developerModeCheckBox.setText("Developer Mode");
        developerModeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                developerModeCheckBoxActionPerformed(evt);
            }
        });

        loggingHeaderLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        loggingHeaderLabel.setText("Logging");

        openEventLogButton.setText("Open Event Log");
        openEventLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openEventLogButtonActionPerformed(evt);
            }
        });

        clearEventLogButton.setText("Clear Event Log");
        clearEventLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEventLogButtonActionPerformed(evt);
            }
        });

        eventLogFileLocationLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        eventLogFileLocationLabel.setText(System.getProperty("user.home") + "/Library/Application Support/Moose/Logs/eventLog.log");
        eventLogFileLocationLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        eventLogFileLocationLabel.setMaximumSize(new java.awt.Dimension(66, 40));
        eventLogFileLocationLabel.setMinimumSize(new java.awt.Dimension(66, 40));
        eventLogFileLocationLabel.setPreferredSize(new java.awt.Dimension(66, 40));

        openErrorLogButton.setText("Open Error Log");
        openErrorLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openErrorLogButtonActionPerformed(evt);
            }
        });

        clearErrorLogButton.setText("Clear Error Log");
        clearErrorLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearErrorLogButtonActionPerformed(evt);
            }
        });

        errorLogFileLocationLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        errorLogFileLocationLabel.setText(System.getProperty("user.home") + "/Library/Application Support/Moose/Logs/errorLog.log");
        errorLogFileLocationLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        errorLogFileLocationLabel.setMaximumSize(new java.awt.Dimension(66, 40));
        errorLogFileLocationLabel.setMinimumSize(new java.awt.Dimension(66, 40));
        errorLogFileLocationLabel.setPreferredSize(new java.awt.Dimension(66, 40));

        javax.swing.GroupLayout loggingPanelLayout = new javax.swing.GroupLayout(loggingPanel);
        loggingPanel.setLayout(loggingPanelLayout);
        loggingPanelLayout.setHorizontalGroup(
            loggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loggingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventLogFileLocationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(errorLogFileLocationLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(separator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(loggingPanelLayout.createSequentialGroup()
                        .addComponent(openEventLogButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(clearEventLogButton))
                    .addGroup(loggingPanelLayout.createSequentialGroup()
                        .addComponent(openErrorLogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearErrorLogButton))
                    .addGroup(loggingPanelLayout.createSequentialGroup()
                        .addGroup(loggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(debuggingHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(debugCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loggingHeaderLabel)
                            .addComponent(developerModeCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        loggingPanelLayout.setVerticalGroup(
            loggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loggingPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(debuggingHeaderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(debugCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(developerModeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loggingHeaderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openEventLogButton)
                    .addComponent(clearEventLogButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventLogFileLocationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(loggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openErrorLogButton)
                    .addComponent(clearErrorLogButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLogFileLocationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Logging", loggingPanel);

        libraryLocationHeaderLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        libraryLocationHeaderLabel.setText("Music Library Location:");

        libraryLocationField.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        libraryLocationField.setText(settingsController.getSettings().getLibraryLocation());
        libraryLocationField.setToolTipText("");
        libraryLocationField.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        libraryLocationField.setMaximumSize(new java.awt.Dimension(66, 40));
        libraryLocationField.setMinimumSize(new java.awt.Dimension(66, 40));
        libraryLocationField.setPreferredSize(new java.awt.Dimension(66, 40));
        libraryLocationField.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        libraryBrowseButton.setText("Browse...");
        libraryBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                libraryBrowseButtonActionPerformed(evt);
            }
        });

        libraryLocationHeaderLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        libraryLocationHeaderLabel1.setText("Application Support Directory:");

        libraryLocationField1.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        libraryLocationField1.setText(settingsController.getSettings().getApplicationSupportLocation());
        libraryLocationField1.setToolTipText("");
        libraryLocationField1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        libraryLocationField1.setMaximumSize(new java.awt.Dimension(66, 40));
        libraryLocationField1.setMinimumSize(new java.awt.Dimension(66, 40));
        libraryLocationField1.setPreferredSize(new java.awt.Dimension(66, 40));
        libraryLocationField1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        appSupportOpenButton.setText("Open...");
        appSupportOpenButton.setMaximumSize(new java.awt.Dimension(100, 29));
        appSupportOpenButton.setMinimumSize(new java.awt.Dimension(100, 29));
        appSupportOpenButton.setPreferredSize(new java.awt.Dimension(100, 29));
        appSupportOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appSupportOpenButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filesPanelLayout = new javax.swing.GroupLayout(filesPanel);
        filesPanel.setLayout(filesPanelLayout);
        filesPanelLayout.setHorizontalGroup(
            filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filesPanelLayout.createSequentialGroup()
                        .addComponent(libraryLocationHeaderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(libraryBrowseButton))
                    .addGroup(filesPanelLayout.createSequentialGroup()
                        .addGroup(filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(filesPanelLayout.createSequentialGroup()
                                .addComponent(libraryLocationHeaderLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addComponent(appSupportOpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator1)
                            .addComponent(libraryLocationField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(libraryLocationField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        filesPanelLayout.setVerticalGroup(
            filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(libraryLocationHeaderLabel)
                    .addComponent(libraryBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(libraryLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(libraryLocationHeaderLabel1)
                    .addComponent(appSupportOpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(libraryLocationField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Files", filesPanel);

        apiPanel.setToolTipText("");

        googleSearchEngineLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        googleSearchEngineLabel.setText("Google Custom Search Engine");

        cseTextField.setText(this.settingsController.getSettings().getAlbumArtFinderCseId());
        cseTextField.setMaximumSize(new java.awt.Dimension(367, 26));
        cseTextField.setMinimumSize(new java.awt.Dimension(367, 26));
        cseTextField.setPreferredSize(new java.awt.Dimension(367, 26));
        cseTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cseTextFieldKeyReleased(evt);
            }
        });

        apiKeyLabel.setText("API Key");

        apiKeyTextField.setText(this.settingsController.getSettings().getAlbumArtFinderApiKey());
        apiKeyTextField.setMaximumSize(new java.awt.Dimension(367, 26));
        apiKeyTextField.setMinimumSize(new java.awt.Dimension(367, 26));
        apiKeyTextField.setPreferredSize(new java.awt.Dimension(367, 26));
        apiKeyTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                apiKeyTextFieldKeyReleased(evt);
            }
        });

        dateLastUsedLabel.setText("Date last used:");

        dateLastUsedField.setText(this.settingsController.getSettings().getAlbumArtFinderSearchCountDate());
        dateLastUsedField.setToolTipText("");

        timesUsedTodayLabel.setText("Times used today:");

        timesUsedTodayField.setText(populateTimesUsedTodayField());

        preferredCoverArtSizeLabel.setText("Preferred cover art size:");

        preferredCoverArtSizeSpinner.setValue(this.settingsController.getSettings().getPreferredCoverArtSize());
        preferredCoverArtSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                preferredCoverArtSizeSpinnerStateChanged(evt);
            }
        });

        cseLabel.setText("CSE ID:");

        spotifyLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        spotifyLabel.setText("Spotify API");

        spotifyClientIdLabel.setText("Client ID:");

        spotifyClientSecretLabel.setText("Client Secret:");

        spotifyClientIdTextField.setText(this.settingsController.getSettings().getSpotifyClientId());
        spotifyClientIdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                spotifyClientIdTextFieldKeyReleased(evt);
            }
        });

        spotifyClientSecretTextField.setText(this.settingsController.getSettings().getSpotifyClientSecret());
        spotifyClientSecretTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                spotifyClientSecretTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout apiPanelLayout = new javax.swing.GroupLayout(apiPanel);
        apiPanel.setLayout(apiPanelLayout);
        apiPanelLayout.setHorizontalGroup(
            apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separator2)
                    .addComponent(googleSearchEngineLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                    .addGroup(apiPanelLayout.createSequentialGroup()
                        .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(dateLastUsedLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(timesUsedTodayLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateLastUsedField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(timesUsedTodayField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(separator3)
                    .addGroup(apiPanelLayout.createSequentialGroup()
                        .addComponent(cseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(apiPanelLayout.createSequentialGroup()
                        .addComponent(apiKeyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(apiKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(apiPanelLayout.createSequentialGroup()
                        .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(apiPanelLayout.createSequentialGroup()
                                .addComponent(preferredCoverArtSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(preferredCoverArtSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(spotifyLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(apiPanelLayout.createSequentialGroup()
                        .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(spotifyClientIdLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spotifyClientSecretLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spotifyClientIdTextField)
                            .addComponent(spotifyClientSecretTextField))))
                .addContainerGap())
        );
        apiPanelLayout.setVerticalGroup(
            apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(googleSearchEngineLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cseLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apiKeyLabel)
                    .addComponent(apiKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLastUsedLabel)
                    .addComponent(dateLastUsedField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timesUsedTodayLabel)
                    .addComponent(timesUsedTodayField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spotifyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spotifyClientIdLabel)
                    .addComponent(spotifyClientIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spotifyClientSecretLabel)
                    .addComponent(spotifyClientSecretTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(separator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(apiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preferredCoverArtSizeLabel)
                    .addComponent(preferredCoverArtSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabbedPane.addTab("API Config", apiPanel);

        jLabel1.setText("AutoTagging:");

        removeCommentCheckBox.setSelected(settingsController.getSettings().getFeatures().get(Settings.REMOVE_COMMENT_ON_AUTOTAGGING));
        removeCommentCheckBox.setText("Remove comments on AutoTagging");
        removeCommentCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCommentCheckBoxActionPerformed(evt);
            }
        });

        autoCoverArtSpotifyCheckBox.setSelected(settingsController.getSettings().getFeatures().get(Settings.AUTO_FIND_COVER_ART_WITH_SPOTIFY));
        autoCoverArtSpotifyCheckBox.setText("Auto find and add cover art with Spotify API");
        autoCoverArtSpotifyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCoverArtSpotifyCheckBoxActionPerformed(evt);
            }
        });

        genreCheckBox.setSelected(settingsController.getSettings().getFeatures().get(Settings.CHECK_FOR_NEW_GENRES));
        genreCheckBox.setText("Check for new genres");
        genreCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreCheckBoxActionPerformed(evt);
            }
        });

        autoTaggingCheckBox.setSelected(settingsController.getSettings().getFeatures().get(Settings.AUTOTAGGING));
        autoTaggingCheckBox.setText("AutoTagging");
        autoTaggingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoTaggingCheckBoxActionPerformed(evt);
            }
        });

        albumArtFinderCheckBox.setSelected(settingsController.getSettings().getFeatures().get(Settings.ALBUM_ART_FINDER));
        albumArtFinderCheckBox.setText("Album Art Finder");
        albumArtFinderCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                albumArtFinderCheckBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Other:");

        formatFilenamesCheckBox.setSelected(settingsController.getSettings().getFeatures().get(Settings.FORMAT_FILENAMES));
        formatFilenamesCheckBox.setText("Format Filenames");
        formatFilenamesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatFilenamesCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout featuresPanelLayout = new javax.swing.GroupLayout(featuresPanel);
        featuresPanel.setLayout(featuresPanelLayout);
        featuresPanelLayout.setHorizontalGroup(
            featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featuresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeCommentCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                    .addComponent(autoCoverArtSpotifyCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(genreCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(autoTaggingCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(albumArtFinderCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(featuresPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(formatFilenamesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        featuresPanelLayout.setVerticalGroup(
            featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featuresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(autoTaggingCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeCommentCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoCoverArtSpotifyCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formatFilenamesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(genreCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(albumArtFinderCheckBox)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Features", featuresPanel);

        statusLabel.setForeground(new java.awt.Color(0, 130, 47));
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        statusLabel.setText(" ");
        statusLabel.setToolTipText("");

        saveButton.setText("Save Settings");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        defaultButton.setText("Restore Defaults");
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(defaultButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(defaultButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event for addButton
     * Checks if you're adding a new value or editing an existing value
     *
     * @param evt
     */
    private void addGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGenreButtonActionPerformed
        if (addGenreButton.getText().equals("Add")) {
            addGenreToList(genreTextField.getText());
        } else if (addGenreButton.getText().equals("Submit")) {
            submitGenreChange(genreList.getSelectedValue(), genreTextField.getText());
            genreList.clearSelection();
            addGenreButton.setText("Add");
            deleteGenreButton.setEnabled(false);
            cancelButton.setEnabled(false);
            genreTextField.setText(StringUtils.EMPTY);
        }
    }//GEN-LAST:event_addGenreButtonActionPerformed

    /**
     * Event for deleteButton
     *
     * @param evt, the event
     */
    private void deleteGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGenreButtonActionPerformed
        removeGenreFromList(genreTextField.getText());
    }//GEN-LAST:event_deleteGenreButtonActionPerformed

    private void genreTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_genreTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addGenreToList(genreTextField.getText());
        }
    }//GEN-LAST:event_genreTextFieldKeyPressed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        genreList.clearSelection();
        addGenreButton.setText("Add");
        deleteGenreButton.setEnabled(false);
        cancelButton.setEnabled(false);
        genreTextField.setText(StringUtils.EMPTY);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Event for the JList click
     * Sets the value of the text field and changes the button text to reflect the current action
     *
     * @param evt, the event
     */
    private void genreListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genreListMouseClicked
        addGenreButton.setText("Submit");
        deleteGenreButton.setEnabled(true);
        cancelButton.setEnabled(true);
        genreTextField.setText(genreList.getSelectedValue()
                .replace(HTML_PREFIX, StringUtils.EMPTY)
                .replace(HTML_SUFFIX, StringUtils.EMPTY));
    }//GEN-LAST:event_genreListMouseClicked

    /**
     * Event for the debuggingMode checkbox
     *
     * @param evt, the event
     */
    private void debugCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugCheckBoxActionPerformed
        if (!debugEdited) {
            debugCheckBox.setForeground(Constants.GREEN);
        } else {
            debugCheckBox.setForeground(Constants.BLACK);
        }
        settings.setInDebugMode(debugCheckBox.isSelected());
        debugEdited = !debugEdited;
        statusLabel.setText(StringUtils.EMPTY);
    }//GEN-LAST:event_debugCheckBoxActionPerformed

    /**
     * Event for the developerMode checkbox
     *
     * @param evt, the event
     */
    private void developerModeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_developerModeCheckBoxActionPerformed
        if (!developerModeEdited) {
            developerModeCheckBox.setForeground(Constants.GREEN);
        } else {
            developerModeCheckBox.setForeground(Constants.BLACK);
        }
        settings.setInDeveloperMode(developerModeCheckBox.isSelected());
        developerModeEdited = !developerModeEdited;
        statusLabel.setText(StringUtils.EMPTY);
    }//GEN-LAST:event_developerModeCheckBoxActionPerformed

    /**
     * Event for the open eventlog button
     *
     * @param evt, the event
     */
    private void openEventLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openEventLogButtonActionPerformed
        settingsController.openEventLog();
    }//GEN-LAST:event_openEventLogButtonActionPerformed

    /**
     * Event for the open errorlog button
     *
     * @param evt, the event
     */
    private void openErrorLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openErrorLogButtonActionPerformed
        settingsController.openErrorLog();
    }//GEN-LAST:event_openErrorLogButtonActionPerformed

    /**
     * Event for the clear eventlog button
     *
     * @param evt, the event
     */
    private void clearEventLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEventLogButtonActionPerformed
        int returnVal = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to clear the event log?",
                "Confirm Clear",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
        if (returnVal == 0) {
            settingsController.clearEventLog();
        }
    }//GEN-LAST:event_clearEventLogButtonActionPerformed

    /**
     * Event for the clear errorlog button
     *
     * @param evt, the event
     */
    private void clearErrorLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearErrorLogButtonActionPerformed
        int returnVal = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to clear the error log?",
                "Confirm Clear",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);
        if (returnVal == 0) {
            settingsController.clearErrorLog();
        }
    }//GEN-LAST:event_clearErrorLogButtonActionPerformed

    /**
     * Event for the browse button on the files tab
     *
     * @param evt, the event
     */
    private void libraryBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_libraryBrowseButtonActionPerformed
        // get the folder through a JFileChooser
        File dir = Objects.requireNonNull(FileUtils.launchJFileChooser(
                "Choose the directory you want to store music in...",
                "Select",
                JFileChooser.DIRECTORIES_ONLY,
                false,
                null,
                null))[0];
        if (dir != null) {
            String originalLibraryLocation = settings.getLibraryLocation();
            settings.setLibraryLocation(dir.getAbsolutePath() + "/");
            if (!originalLibraryLocation.equals(settings.getLibraryLocation())) {
                libraryLocationField.setForeground(Constants.GREEN);
                libraryLocationField.setText(settings.getLibraryLocation());
            }
            statusLabel.setText(StringUtils.EMPTY);
        }
    }//GEN-LAST:event_libraryBrowseButtonActionPerformed

    private void appSupportOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appSupportOpenButtonActionPerformed
        try {
            FileUtils.openFile(new File(settingsController.getSettings().getApplicationSupportLocation()));
        } catch (Exception e) {
            logger.logError("Couldn't open file!", e);
        }

    }//GEN-LAST:event_appSupportOpenButtonActionPerformed

    private void preferredCoverArtSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_preferredCoverArtSizeSpinnerStateChanged
        int originalValue = Moose.getSettings().getPreferredCoverArtSize();
        if (!preferredCoverArtSizeSpinner.getValue().equals(originalValue)) {
            Component c = preferredCoverArtSizeSpinner.getEditor().getComponent(0);
            c.setForeground(Constants.GREEN);
            settings.setPreferredCoverArtSize((Integer) preferredCoverArtSizeSpinner.getValue());
        } else {
            Component c = preferredCoverArtSizeSpinner.getEditor().getComponent(0);
            c.setForeground(Constants.BLACK);
        }
    }//GEN-LAST:event_preferredCoverArtSizeSpinnerStateChanged

    /**
     * Event for the default button
     *
     * @param evt, the event
     */
    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        defaultSettings();
    }//GEN-LAST:event_defaultButtonActionPerformed

    /**
     * Event for the save button
     *
     * @param evt, the event
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (Moose.updateSettings(settings)) {
            statusLabel.setForeground(Constants.GREEN);
            statusLabel.setText("Settings saved!");
            resetUI();
            settings = Moose.getSettings();
        } else {
            statusLabel.setForeground(Constants.RED);
            statusLabel.setText("Problem updating Settings...");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void autoTaggingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoTaggingCheckBoxActionPerformed
        if (!autoTaggingEdited) {
            autoTaggingCheckBox.setForeground(Constants.GREEN);
        } else {
            autoTaggingCheckBox.setForeground(Constants.BLACK);
        }
        // set the other autotagging fields based on the current value of the auto tagging checkbox
        if (autoTaggingCheckBox.isSelected()) {
            removeCommentCheckBox.setEnabled(true);
            autoCoverArtSpotifyCheckBox.setEnabled(true);
        } else {
            settings.getFeatures().put(Settings.REMOVE_COMMENT_ON_AUTOTAGGING, false);
            settings.getFeatures().put(Settings.AUTO_FIND_COVER_ART_WITH_SPOTIFY, false);
            removeCommentCheckBox.setEnabled(false);
            autoCoverArtSpotifyCheckBox.setEnabled(false);
        }
        settings.getFeatures().put(Settings.AUTOTAGGING, autoTaggingCheckBox.isSelected());
        autoTaggingEdited = !autoTaggingEdited;
        statusLabel.setText(StringUtils.EMPTY);
    }//GEN-LAST:event_autoTaggingCheckBoxActionPerformed

    private void removeCommentCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCommentCheckBoxActionPerformed
        if (!removeCommentEdited) {
            removeCommentCheckBox.setForeground(Constants.GREEN);
        } else {
            removeCommentCheckBox.setForeground(Constants.BLACK);
        }
        settings.getFeatures().put(Settings.REMOVE_COMMENT_ON_AUTOTAGGING, removeCommentCheckBox.isSelected());
        removeCommentEdited = !removeCommentEdited;
        statusLabel.setText(StringUtils.EMPTY);
    }//GEN-LAST:event_removeCommentCheckBoxActionPerformed

    private void autoCoverArtSpotifyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoCoverArtSpotifyCheckBoxActionPerformed
        if (!autoCoverArtSpotifyEdited) {
            autoCoverArtSpotifyCheckBox.setForeground(Constants.GREEN);
        } else {
            autoCoverArtSpotifyCheckBox.setForeground(Constants.BLACK);
        }
        settings.getFeatures().put(Settings.AUTO_FIND_COVER_ART_WITH_SPOTIFY, autoCoverArtSpotifyCheckBox.isSelected());
        autoCoverArtSpotifyEdited = !autoCoverArtSpotifyEdited;
        statusLabel.setText(StringUtils.EMPTY);
    }//GEN-LAST:event_autoCoverArtSpotifyCheckBoxActionPerformed

    private void formatFilenamesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatFilenamesCheckBoxActionPerformed
        if (!formatFilenamesEdited) {
            formatFilenamesCheckBox.setForeground(Constants.GREEN);
        } else {
            formatFilenamesCheckBox.setForeground(Constants.BLACK);
        }
        settings.getFeatures().put(Settings.FORMAT_FILENAMES, formatFilenamesCheckBox.isSelected());
        formatFilenamesEdited = !formatFilenamesEdited;
        statusLabel.setText(StringUtils.EMPTY);
    }//GEN-LAST:event_formatFilenamesCheckBoxActionPerformed

    private void genreCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreCheckBoxActionPerformed
        if (!checkForNewGenresEdited) {
            genreCheckBox.setForeground(Constants.GREEN);
        } else {
            genreCheckBox.setForeground(Constants.BLACK);
        }
        settings.getFeatures().put(Settings.CHECK_FOR_NEW_GENRES, genreCheckBox.isSelected());
        checkForNewGenresEdited = !checkForNewGenresEdited;
        statusLabel.setText(StringUtils.EMPTY);
    }//GEN-LAST:event_genreCheckBoxActionPerformed

    private void albumArtFinderCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_albumArtFinderCheckBoxActionPerformed
        if (!albumArtFinderEdited) {
            albumArtFinderCheckBox.setForeground(Constants.GREEN);
        } else {
            albumArtFinderCheckBox.setForeground(Constants.BLACK);
        }
        settings.getFeatures().put(Settings.ALBUM_ART_FINDER, albumArtFinderCheckBox.isSelected());
        albumArtFinderEdited = !albumArtFinderEdited;
        statusLabel.setText(StringUtils.EMPTY);
    }//GEN-LAST:event_albumArtFinderCheckBoxActionPerformed

    private void cseTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cseTextFieldKeyReleased
        String originalValue = settingsController.getSettings().getAlbumArtFinderCseId();
        if (!originalValue.equals(cseTextField.getText())) {
            cseTextField.setForeground(Constants.GREEN);
            settings.setAlbumArtFinderCseId(cseTextField.getText());
        }
    }//GEN-LAST:event_cseTextFieldKeyReleased

    private void apiKeyTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apiKeyTextFieldKeyReleased
        String originalValue = settingsController.getSettings().getAlbumArtFinderApiKey();
        if (!originalValue.equals(apiKeyTextField.getText())) {
            apiKeyTextField.setForeground(Constants.GREEN);
            settings.setAlbumArtFinderApiKey(apiKeyTextField.getText());
        }
    }//GEN-LAST:event_apiKeyTextFieldKeyReleased

    private void spotifyClientIdTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spotifyClientIdTextFieldKeyReleased
        String originalValue = settingsController.getSettings().getSpotifyClientId();
        if (!originalValue.equals(spotifyClientIdTextField.getText())) {
            spotifyClientIdTextField.setForeground(Constants.GREEN);
            settings.setSpotifyClientId(spotifyClientIdTextField.getText());
        }
    }//GEN-LAST:event_spotifyClientIdTextFieldKeyReleased

    private void spotifyClientSecretTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spotifyClientSecretTextFieldKeyReleased
        String originalValue = settingsController.getSettings().getSpotifyClientSecret();
        if (!originalValue.equals(spotifyClientSecretTextField.getText())) {
            spotifyClientSecretTextField.setForeground(Constants.GREEN);
            settings.setSpotifyClientSecret(spotifyClientSecretTextField.getText());
        }
    }//GEN-LAST:event_spotifyClientSecretTextFieldKeyReleased

    /**
     * Gets the list of genres and fill a DefaultListModel for the view
     *
     * @return the listModel for the JList
     */
    public DefaultListModel<String> getGenreListModel() {
        genreListModel.removeAllElements();
        if (settingsController.getSettings().getGenres() != null) {
            for (int i = 0; i < settingsController.getSettings().getGenres().size(); i++) {
                genreListModel.add(i, settingsController.getSettings().getGenres().get(i));
            }
            return genreListModel;
        } else {
            return new DefaultListModel<>();
        }
    }

    /**
     * Populates the times used today field
     * Checks to see if the date matches today, to set the counter back to 0
     *
     * @return the times used today
     */
    public String populateTimesUsedTodayField() {
        try {
            Date lastUsed = DateUtils.getSimpleDate(this.settingsController.getSettings().getAlbumArtFinderSearchCountDate());
            lastUsed = lastUsed == null ? new Date() : lastUsed;

            // check to see if date in settings is today
            if (!DateUtils.isDateSameAsToday(lastUsed)) {
                // date was not today, set the times used today to 0
                this.settingsController.getSettings().setAlbumArtFinderSearchCount(0);
                this.settingsController.writeSettingsFile(settings);
            }

            return String.valueOf(this.settingsController.getSettings().getAlbumArtFinderSearchCount())
                    .concat("/")
                    .concat(String.valueOf(Constants.IMAGE_LIMIT));
        } catch (ParseException e) {
            logger.logError("Couldn't parse date: " + this.settingsController.getSettings().getAlbumArtFinderSearchCountDate(), e);
            return null;
        }
    }

    /**
     * Adds the genre to the ivar list and the JList model
     *
     * @param genre the genre to add
     */
    public void addGenreToList(String genre) {
        if (!settings.getGenres().contains(genre) && !genreTextField.getText().equals(StringUtils.EMPTY)) {
            settings.getGenres().add(genre);
            genreListModel.add(genreListModel.size(), "<html><b><i>" + genre + "</i></b></html>");
            genreTextField.setText(StringUtils.EMPTY);
            statusLabel.setText(StringUtils.EMPTY);
        }
    }

    /**
     * Removes the genre from the ivar list and the JList model
     *
     * @param genre, the genre to remove
     */
    public void removeGenreFromList(String genre) {
        if (!genreListModel.removeElement(genre)) {
            JOptionPane.showMessageDialog(null, "Element was not in list!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            settings.getGenres().remove(genre);
            genreTextField.setText(StringUtils.EMPTY);
            addGenreButton.setText("Add");
            deleteGenreButton.setEnabled(false);
            cancelButton.setEnabled(false);
            statusLabel.setText(StringUtils.EMPTY);
            genreStatusLabel.setForeground(Constants.GREEN);
            genresDeleted++;
            genreStatusLabel.setText(genresDeleted + " genre(s) deleted!");
        }
    }

    /**
     * Submits the change in the list and in the arraylist
     *
     * @param oldGenre, the old genre to update
     * @param newGenre, the new value of the genre
     */
    public void submitGenreChange(String oldGenre, String newGenre) {

        // the alreadyEdited mess is to check if the list entry was edited already, so I need to worry about the
        // html tags showing up or not, since I need to index the array based on the value
        // just don't worry about it, it works lol
        boolean alreadyEdited = oldGenre.contains(HTML_PREFIX) && oldGenre.contains(HTML_SUFFIX);
        if (alreadyEdited) {
            String oldGenre_withoutHtml = oldGenre
                    .replace(HTML_PREFIX, StringUtils.EMPTY)
                    .replace(HTML_SUFFIX, StringUtils.EMPTY);
            genreListModel.set(genreListModel.indexOf(oldGenre), oldGenre_withoutHtml);
            oldGenre = oldGenre_withoutHtml;
        }

        settings.getGenres().set(settings.getGenres().indexOf(oldGenre), newGenre);
        newGenre = HTML_PREFIX.concat(newGenre).concat(HTML_SUFFIX);
        genreListModel.set(genreListModel.indexOf(oldGenre), newGenre);
        statusLabel.setText(StringUtils.EMPTY);
    }

    /**
     * Method that runs the default action on the settings based on what the user wants to do
     */
    public void defaultSettings() {
        // get which settings the user wants to reset
        Map<Integer, Boolean> settingsToReset = DialogUtils.showDefaultSettingsDialog(this, tabbedPane.getSelectedIndex());

        // go through the map we get back and reset those settings
        if (settingsToReset != null) {

            if (!settingsToReset.get(Constants.GENRE)
                    && !settingsToReset.get(Constants.LOGGING)
                    && !settingsToReset.get(Constants.FILES)
                    && !settingsToReset.get(Constants.API)
                    && !settingsToReset.get(Constants.FEATURES)) {
                statusLabel.setForeground(Constants.BLACK);
                statusLabel.setText("No settings to reset!");
                return;
            }

            Map<Integer, Boolean> success = new HashMap<>();
            if (settingsToReset.containsKey(Constants.GENRE) && settingsToReset.get(Constants.GENRE)) {
                success.put(Constants.GENRE, this.settingsController.defaultGenres());
            }
            if (settingsToReset.containsKey(Constants.LOGGING) && settingsToReset.get(Constants.LOGGING)) {
                success.put(Constants.LOGGING, this.settingsController.defaultLogging());
            }
            if (settingsToReset.containsKey(Constants.FILES) && settingsToReset.get(Constants.FILES)) {
                success.put(Constants.FILES, this.settingsController.defaultFiles());
            }
            if (settingsToReset.containsKey(Constants.API) && settingsToReset.get(Constants.API)) {
                success.put(Constants.API, this.settingsController.defaultApi());
            }
            if (settingsToReset.containsKey(Constants.FEATURES) && settingsToReset.get(Constants.FEATURES)) {
                success.put(Constants.FEATURES, this.settingsController.defaultFeatures());
            }

            // build the message to show to the user based on the success map
            String message = StringUtils.EMPTY;
            if (success.containsKey(Constants.GENRE)) {
                message = "Genres";
            }
            if (success.containsKey(Constants.LOGGING)) {
                if (StringUtils.isEmpty(message)) {
                    message = "Logging";
                } else {
                    message = message.concat(", Logging");
                }
            }
            if (success.containsKey(Constants.FILES)) {
                if (StringUtils.isEmpty(message)) {
                    message = "Files";
                } else {
                    message = message.concat(", Files");
                }
            }
            if (success.containsKey(Constants.API)) {
                if (StringUtils.isEmpty(message)) {
                    message = "API Config";
                } else {
                    message = message.concat(", API Config");
                }
            }
            if (success.containsKey(Constants.FEATURES)) {
                if (StringUtils.isEmpty(message)) {
                    message = "Features";
                } else {
                    message = message.concat(", Features");
                }
            }

            // set the status label
            if (StringUtils.isEmpty(message)) {
                statusLabel.setForeground(Constants.RED);
                statusLabel.setText("Problem updating settings...");
            } else {
                statusLabel.setForeground(Constants.GREEN);
                if (success.size() == 5) {
                    message = "All settings reset!";
                } else {
                    message = message.concat(" settings reset!");
                }
                statusLabel.setText(message);
            }

            // reset graphics
            resetUI();
        }
    }

    /**
     * Resets the UI on a successful settings save
     */
    private void resetUI() {
        genreList.setModel(getGenreListModel());
        genreStatusLabel.setText(StringUtils.EMPTY);
        debugCheckBox.setForeground(Constants.BLACK);
        debugCheckBox.setSelected(Moose.getSettings().isInDebugMode());
        developerModeCheckBox.setForeground(Constants.BLACK);
        developerModeCheckBox.setSelected(Moose.getSettings().isInDeveloperMode());
        libraryLocationField.setForeground(Constants.BLACK);
        libraryLocationField.setText(Moose.getSettings().getLibraryLocation());
        autoTaggingCheckBox.setForeground(Constants.BLACK);
        autoTaggingCheckBox.setSelected(Moose.getSettings().getFeatures().get(Settings.AUTOTAGGING));
        removeCommentCheckBox.setForeground(Constants.BLACK);
        removeCommentCheckBox.setSelected(Moose.getSettings().getFeatures().get(Settings.REMOVE_COMMENT_ON_AUTOTAGGING));
        removeCommentCheckBox.setEnabled(true);
        autoCoverArtSpotifyCheckBox.setForeground(Constants.BLACK);
        autoCoverArtSpotifyCheckBox.setSelected(Moose.getSettings().getFeatures().get(Settings.AUTO_FIND_COVER_ART_WITH_SPOTIFY));
        autoCoverArtSpotifyCheckBox.setEnabled(true);
        formatFilenamesCheckBox.setForeground(Constants.BLACK);
        formatFilenamesCheckBox.setSelected(Moose.getSettings().getFeatures().get(Settings.FORMAT_FILENAMES));
        formatFilenamesCheckBox.setEnabled(true);
        genreCheckBox.setForeground(Constants.BLACK);
        genreCheckBox.setSelected(Moose.getSettings().getFeatures().get(Settings.CHECK_FOR_NEW_GENRES));
        albumArtFinderCheckBox.setForeground(Constants.BLACK);
        albumArtFinderCheckBox.setSelected(Moose.getSettings().getFeatures().get(Settings.ALBUM_ART_FINDER));
        cseTextField.setForeground(Constants.BLACK);
        cseTextField.setText(Moose.getSettings().getAlbumArtFinderCseId());
        apiKeyTextField.setForeground(Constants.BLACK);
        apiKeyTextField.setText(Moose.getSettings().getAlbumArtFinderApiKey());
        spotifyClientIdTextField.setText(Moose.getSettings().getSpotifyClientId());
        spotifyClientIdTextField.setForeground(Constants.BLACK);
        spotifyClientSecretTextField.setText(Moose.getSettings().getSpotifyClientSecret());
        spotifyClientSecretTextField.setForeground(Constants.BLACK);
        preferredCoverArtSizeSpinner.getEditor().getComponent(0).setForeground(Constants.BLACK);
        preferredCoverArtSizeSpinner.setValue(Moose.getSettings().getPreferredCoverArtSize());

        // set the menu options
        Moose.getFrame().updateMenuItems();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGenreButton;
    private javax.swing.JCheckBox albumArtFinderCheckBox;
    private javax.swing.JLabel apiKeyLabel;
    private javax.swing.JTextField apiKeyTextField;
    private javax.swing.JPanel apiPanel;
    private javax.swing.JButton appSupportOpenButton;
    private javax.swing.JCheckBox autoCoverArtSpotifyCheckBox;
    private javax.swing.JCheckBox autoTaggingCheckBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearErrorLogButton;
    private javax.swing.JButton clearEventLogButton;
    private javax.swing.JLabel cseLabel;
    private javax.swing.JTextField cseTextField;
    private javax.swing.JLabel dateLastUsedField;
    private javax.swing.JLabel dateLastUsedLabel;
    private javax.swing.JCheckBox debugCheckBox;
    private javax.swing.JLabel debuggingHeaderLabel;
    private javax.swing.JButton defaultButton;
    private javax.swing.JButton deleteGenreButton;
    private javax.swing.JCheckBox developerModeCheckBox;
    private javax.swing.JLabel errorLogFileLocationLabel;
    private javax.swing.JLabel eventLogFileLocationLabel;
    private javax.swing.JPanel featuresPanel;
    private javax.swing.JPanel filesPanel;
    private javax.swing.JCheckBox formatFilenamesCheckBox;
    private javax.swing.JCheckBox genreCheckBox;
    private javax.swing.JList<String> genreList;
    private javax.swing.JPanel genrePanel;
    private javax.swing.JLabel genreStatusLabel;
    private javax.swing.JTextField genreTextField;
    private javax.swing.JLabel genreToAddLabel;
    private javax.swing.JLabel genresHeaderLabel;
    private javax.swing.JScrollPane genresScrollPane;
    private javax.swing.JLabel googleSearchEngineLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton libraryBrowseButton;
    private javax.swing.JLabel libraryLocationField;
    private javax.swing.JLabel libraryLocationField1;
    private javax.swing.JLabel libraryLocationHeaderLabel;
    private javax.swing.JLabel libraryLocationHeaderLabel1;
    private javax.swing.JLabel loggingHeaderLabel;
    private javax.swing.JPanel loggingPanel;
    private javax.swing.JButton openErrorLogButton;
    private javax.swing.JButton openEventLogButton;
    private javax.swing.JLabel preferredCoverArtSizeLabel;
    private javax.swing.JSpinner preferredCoverArtSizeSpinner;
    private javax.swing.JCheckBox removeCommentCheckBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JSeparator separator1;
    private javax.swing.JSeparator separator2;
    private javax.swing.JSeparator separator3;
    private javax.swing.JLabel spotifyClientIdLabel;
    private javax.swing.JTextField spotifyClientIdTextField;
    private javax.swing.JLabel spotifyClientSecretLabel;
    private javax.swing.JTextField spotifyClientSecretTextField;
    private javax.swing.JLabel spotifyLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel timesUsedTodayField;
    private javax.swing.JLabel timesUsedTodayLabel;
    // End of variables declaration//GEN-END:variables
}
