/*
   Proj:   Moose
   File:   InfoFrame.java
   Desc:   Main UI class for the JFrame containing the song info.

   Copyright Pat Ripley 2018
 */

// package
package moose.views;

// imports
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import javax.swing.*;

import moose.Main;
import moose.controllers.SongController;
import moose.objects.Song;
import moose.utilities.ImageUtils;
import moose.utilities.StringUtils;

// class InfoFrame
public class InfoFrame extends javax.swing.JFrame {

    int row;
    
    // some graphics ivars
    ActionListener menuListener;        // listener for the popup menu objects
    
    // songcontroller object
    SongController songController;

    // the song in the thingy
    Song song;

    // edited globals
    boolean edited;
    boolean editModeEnabled;
    Component lastEditedField;
    
    /**
     * Creates new form InfoFrame
     * @param s, the song to source the info from
     * @param row, the row on the table
     */
    public InfoFrame(Song s, int row, boolean editModeEnabled, Component focusedField) {
        initComponents();
        this.setTitle(s.getArtist() + " - " + s.getTitle());
        this.song = s;
        setFields(s);
        setNavigationButtons(row);
        setFieldsEditable(editModeEnabled);
        if (editModeEnabled) {
            editSubmitButton.setText("Submit");
            getFocusedField(focusedField);
        }
        
        this.row = row;
        this.editModeEnabled = editModeEnabled;
        songController = Main.frame.songController;
        
        // listener for the context menu when you right click on a row
        // basically tells the program where to go based on the user's choice
        this.menuListener = (ActionEvent event) -> {

            // switch based on the option selected
            switch (event.getActionCommand()) {
                case "Add":
                    songController.autoTaggingService.addAlbumArt(new int[] {row});
                    addAlbumArt();
                    break;
                case "Remove":
                    songController.removeAlbumArt(new int [] {row});
                    removeAlbumArt();
                    break;
                default:
                    break;
            }
        }; // end menuListener
    }

    /**
     * Sets the focused field
     */
    private void getFocusedField(Component focusedField) {
        if(focusedField == null) {
            return;
        }

        switch (focusedField.getName()) {
            case "filename":
                filenameField.requestFocus();
                break;
            case "title":
                titleField.requestFocus();
                break;
            case "artist":
                artistField.requestFocus();
                break;
            case "album":
                albumField.requestFocus();
                break;
            case "albumArtist":
                albumArtistField.requestFocus();
                break;
            case "year":
                yearField.requestFocus();
                break;
            case "genre":
                genreField.requestFocus();
                break;
            case "track1":
                track1Field.requestFocus();
                break;
            case "track2":
                track2Field.requestFocus();
                break;
            case "disk1":
                disk1Field.requestFocus();
                break;
            case "disk2":
                disk2Field.requestFocus();
                break;
            case "comment":
                commentField.requestFocus();
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        coverLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        filenameField = new javax.swing.JTextField();
        titleField = new javax.swing.JTextField();
        artistField = new javax.swing.JTextField();
        albumField = new javax.swing.JTextField();
        albumArtistField = new javax.swing.JTextField();
        yearField = new javax.swing.JTextField();
        genreField = new javax.swing.JTextField();
        track1Field = new javax.swing.JTextField();
        track2Field = new javax.swing.JTextField();
        disk1Field = new javax.swing.JTextField();
        disk2Field = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        commentField = new javax.swing.JTextArea();
        lengthField = new javax.swing.JTextField();
        bitrateField = new javax.swing.JTextField();
        sampleRateField = new javax.swing.JTextField();
        editSubmitButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        editedLabel = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jLabel2.setText("More Info:");

        coverLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coverLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        coverLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                coverLabelMouseClicked(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Filename:");

        filenameField.setEditable(false);
        filenameField.setMaximumSize(new java.awt.Dimension(200, 26));
        filenameField.setMinimumSize(new java.awt.Dimension(200, 26));
        filenameField.setName("filename"); // NOI18N
        filenameField.setNextFocusableComponent(titleField);
        filenameField.setPreferredSize(new java.awt.Dimension(200, 26));
        filenameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filenameFieldKeyReleased(evt);
            }
        });

        titleField.setEditable(false);
        titleField.setMaximumSize(new java.awt.Dimension(200, 26));
        titleField.setMinimumSize(new java.awt.Dimension(200, 26));
        titleField.setName("title"); // NOI18N
        titleField.setNextFocusableComponent(artistField);
        titleField.setPreferredSize(new java.awt.Dimension(200, 26));
        titleField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                titleFieldKeyReleased(evt);
            }
        });

        artistField.setEditable(false);
        artistField.setMaximumSize(new java.awt.Dimension(200, 26));
        artistField.setMinimumSize(new java.awt.Dimension(200, 26));
        artistField.setName("artist"); // NOI18N
        artistField.setNextFocusableComponent(albumField);
        artistField.setPreferredSize(new java.awt.Dimension(200, 26));
        artistField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                artistFieldKeyReleased(evt);
            }
        });

        albumField.setEditable(false);
        albumField.setMaximumSize(new java.awt.Dimension(200, 26));
        albumField.setMinimumSize(new java.awt.Dimension(200, 26));
        albumField.setName("album"); // NOI18N
        albumField.setNextFocusableComponent(albumArtistField);
        albumField.setPreferredSize(new java.awt.Dimension(200, 26));
        albumField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                albumFieldKeyReleased(evt);
            }
        });

        albumArtistField.setEditable(false);
        albumArtistField.setMaximumSize(new java.awt.Dimension(200, 26));
        albumArtistField.setMinimumSize(new java.awt.Dimension(200, 26));
        albumArtistField.setName("albumArtist"); // NOI18N
        albumArtistField.setNextFocusableComponent(yearField);
        albumArtistField.setPreferredSize(new java.awt.Dimension(200, 26));
        albumArtistField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                albumArtistFieldKeyReleased(evt);
            }
        });

        yearField.setEditable(false);
        yearField.setMaximumSize(new java.awt.Dimension(85, 26));
        yearField.setMinimumSize(new java.awt.Dimension(85, 26));
        yearField.setName("year"); // NOI18N
        yearField.setNextFocusableComponent(genreField);
        yearField.setPreferredSize(new java.awt.Dimension(85, 26));
        yearField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                yearFieldKeyReleased(evt);
            }
        });

        genreField.setEditable(false);
        genreField.setMaximumSize(new java.awt.Dimension(200, 26));
        genreField.setMinimumSize(new java.awt.Dimension(200, 26));
        genreField.setName("genre"); // NOI18N
        genreField.setNextFocusableComponent(track1Field);
        genreField.setPreferredSize(new java.awt.Dimension(200, 26));
        genreField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                genreFieldKeyReleased(evt);
            }
        });

        track1Field.setEditable(false);
        track1Field.setMaximumSize(new java.awt.Dimension(30, 26));
        track1Field.setMinimumSize(new java.awt.Dimension(30, 26));
        track1Field.setName("track1"); // NOI18N
        track1Field.setNextFocusableComponent(track2Field);
        track1Field.setPreferredSize(new java.awt.Dimension(30, 26));
        track1Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                track1FieldKeyReleased(evt);
            }
        });

        track2Field.setEditable(false);
        track2Field.setMaximumSize(new java.awt.Dimension(30, 26));
        track2Field.setMinimumSize(new java.awt.Dimension(30, 26));
        track2Field.setName("track2"); // NOI18N
        track2Field.setNextFocusableComponent(disk1Field);
        track2Field.setPreferredSize(new java.awt.Dimension(30, 26));
        track2Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                track2FieldKeyReleased(evt);
            }
        });

        disk1Field.setEditable(false);
        disk1Field.setMaximumSize(new java.awt.Dimension(30, 26));
        disk1Field.setMinimumSize(new java.awt.Dimension(30, 26));
        disk1Field.setName("disk1"); // NOI18N
        disk1Field.setNextFocusableComponent(disk2Field);
        disk1Field.setPreferredSize(new java.awt.Dimension(30, 26));
        disk1Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                disk1FieldKeyReleased(evt);
            }
        });

        disk2Field.setEditable(false);
        disk2Field.setMaximumSize(new java.awt.Dimension(30, 26));
        disk2Field.setMinimumSize(new java.awt.Dimension(30, 26));
        disk2Field.setName("disk2"); // NOI18N
        disk2Field.setNextFocusableComponent(commentField);
        disk2Field.setPreferredSize(new java.awt.Dimension(30, 26));
        disk2Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                disk2FieldKeyReleased(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Title:");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Artist:");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Album:");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("Album Artist:");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("Year:");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("Track:");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel11.setText("Disk:");

        jLabel12.setText("of");

        jLabel13.setText("of");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel14.setText("Length:");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel15.setText("Bitrate:");

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel16.setText("Sample rate:");

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel17.setText("Comment:");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        commentField.setEditable(false);
        commentField.setColumns(20);
        commentField.setRows(5);
        commentField.setName("comment"); // NOI18N
        commentField.setNextFocusableComponent(filenameField);
        commentField.setPreferredSize(new java.awt.Dimension(250, 80));
        commentField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                commentFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                commentFieldKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(commentField);

        lengthField.setEditable(false);
        lengthField.setMaximumSize(new java.awt.Dimension(85, 26));
        lengthField.setMinimumSize(new java.awt.Dimension(85, 26));
        lengthField.setPreferredSize(new java.awt.Dimension(85, 26));

        bitrateField.setEditable(false);
        bitrateField.setMaximumSize(new java.awt.Dimension(85, 26));
        bitrateField.setMinimumSize(new java.awt.Dimension(85, 26));
        bitrateField.setPreferredSize(new java.awt.Dimension(85, 26));

        sampleRateField.setEditable(false);
        sampleRateField.setMaximumSize(new java.awt.Dimension(85, 26));
        sampleRateField.setMinimumSize(new java.awt.Dimension(85, 26));
        sampleRateField.setPreferredSize(new java.awt.Dimension(85, 26));

        editSubmitButton.setText("Edit");
        editSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSubmitButtonActionPerformed(evt);
            }
        });

        previousButton.setText("<");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText(">");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel18.setText("Genre:");

        editedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(albumArtistField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(albumField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(artistField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(titleField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(filenameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(genreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(track1Field, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(disk1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel13)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(disk2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(track2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lengthField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bitrateField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(sampleRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(115, 115, 115))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(coverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(filenameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(artistField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(albumField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(albumArtistField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(genreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(track1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(track2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(disk1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(disk2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(lengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(bitrateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(sampleRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(coverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editSubmitButton)
                        .addComponent(previousButton)
                        .addComponent(nextButton))
                    .addComponent(editedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        next();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        previous();
    }//GEN-LAST:event_previousButtonActionPerformed

    private void editSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSubmitButtonActionPerformed
        if(editSubmitButton.getText().equals("Edit")) {
            editSubmitButton.setText("Submit");
            setFieldsEditable(true);
        } else if (editSubmitButton.getText().equals("Submit")) {
            editSubmitButton.setText("Edit");
            setFieldsEditable(false);
            submit();
            this.editModeEnabled = false;
        }
    }//GEN-LAST:event_editSubmitButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        setFieldsEditable(false);
        Main.frame.setEnabled(true);
    }//GEN-LAST:event_formWindowClosed

    private void filenameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filenameFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getFile().getName().equals(filenameField.getText())) {
            edited = true;
        }
        lastEditedField = filenameField;
    }//GEN-LAST:event_filenameFieldKeyReleased

    private void coverLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coverLabelMouseClicked
        showArtworkPopup(evt);
    }//GEN-LAST:event_coverLabelMouseClicked

    private void titleFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_titleFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getTitle().equals(titleField.getText())) {
            edited = true;
            editedLabel.setIcon(new ImageIcon(getClass().getResource("/resources/edit.png")));
        }
        lastEditedField = titleField;
    }//GEN-LAST:event_titleFieldKeyReleased

    private void artistFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_artistFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getArtist().equals(artistField.getText())) {
            edited = true;
            editedLabel.setIcon(new ImageIcon(getClass().getResource("/resources/edit.png")));
        }
        lastEditedField = artistField;
    }//GEN-LAST:event_artistFieldKeyReleased

    private void albumFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_albumFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getAlbum().equals(albumField.getText())) {
            edited = true;
        }
        lastEditedField = albumField;
    }//GEN-LAST:event_albumFieldKeyReleased

    private void albumArtistFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_albumArtistFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getAlbumArtist().equals(albumArtistField.getText())) {
            edited = true;
        }
        lastEditedField = albumArtistField;
    }//GEN-LAST:event_albumArtistFieldKeyReleased

    private void yearFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getYear().equals(yearField.getText())) {
            edited = true;
        }
        lastEditedField = yearField;
    }//GEN-LAST:event_yearFieldKeyReleased

    private void genreFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_genreFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getGenre().equals(genreField.getText())) {
            edited = true;
        }
        lastEditedField = genreField;
    }//GEN-LAST:event_genreFieldKeyReleased

    private void track1FieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_track1FieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getTrack().equals(track1Field.getText())) {
            edited = true;
        }
        lastEditedField = track1Field;
    }//GEN-LAST:event_track1FieldKeyReleased

    private void track2FieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_track2FieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getTotalTracks().equals(track2Field.getText())) {
            edited = true;
        }
        lastEditedField = track2Field;
    }//GEN-LAST:event_track2FieldKeyReleased

    private void disk1FieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_disk1FieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getDisk().equals(disk1Field.getText())) {
            edited = true;
        }
        lastEditedField = disk1Field;
    }//GEN-LAST:event_disk1FieldKeyReleased

    private void disk2FieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_disk2FieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        }
        if (!song.getTotalDisks().equals(disk2Field.getText())) {
            edited = true;
        }
        lastEditedField = disk2Field;
    }//GEN-LAST:event_disk2FieldKeyReleased

    private void commentFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commentFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            editSubmitButton.doClick();
        } else if (!song.getComment().equals(commentField.getText())) {
            edited = true;
        }
        lastEditedField = commentField;
    }//GEN-LAST:event_commentFieldKeyReleased

    private void commentFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commentFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            commentField.transferFocus();
            evt.consume();  // consume prilosec
        }
    }//GEN-LAST:event_commentFieldKeyPressed

    /**
     * Gets the album art from the table and puts it on the more info frame
     */
    public void addAlbumArt() {
        byte[] bytes = songController.getSongs().get(songController.getIndex(row)).getArtwork_bytes();
        Icon artwork_icon = ImageUtils.getScaledImage(bytes, 150);
        coverLabel.setIcon(artwork_icon);
    }
    
    /**
     * Removes the album art from the label on the more info frame
     */
     public void removeAlbumArt() {
         coverLabel.setIcon(null);
     }
    
    /**
     * Goes to the next song
     */
    public void next() {
        if (editSubmitButton.getText().equals("Submit")) {
            this.editModeEnabled = true;
        }
        submit();
        this.dispose();
        Main.frame.next(this.editModeEnabled, lastEditedField);
    }
    
    /**
     * Goes to the previous song
     */
    public void previous() {
        if (editSubmitButton.getText().equals("Submit")) {
            this.editModeEnabled = true;
        }
        submit();
        this.dispose();
        Main.frame.previous(this.editModeEnabled, lastEditedField);
    }

    /**
     * Sets the navigation buttons based on the row selected in the table
     * @param row, the row to check against
     */
    public void setNavigationButtons(int row) {
        if(row == Main.frame.table.getRowCount() - 1) {
            previousButton.setEnabled(true);
            nextButton.setEnabled(false);
        } else if (row == 0) {
            previousButton.setEnabled(false);
            nextButton.setEnabled(true);
        }
    }
    
    /**
     * Sets the fields on the UI
     * @param s, the song with the data to set
     */
    public void setFields(Song s) {
        filenameField.setText(s.getFile().getName());
        titleField.setText(s.getTitle());
        artistField.setText(s.getArtist());
        albumField.setText(s.getAlbum());
        albumArtistField.setText(s.getAlbumArtist());
        yearField.setText(s.getYear());
        genreField.setText(s.getGenre());
        track1Field.setText(s.getTrack());
        track2Field.setText(s.getTotalTracks());
        disk1Field.setText(s.getDisk());
        disk2Field.setText(s.getTotalDisks());
        lengthField.setText(s.getLength());
        bitrateField.setText(s.getBitrate());
        sampleRateField.setText(s.getSampleRate());
        commentField.setText(s.getComment());
        coverLabel.setIcon(ImageUtils.getScaledImage(s.getArtwork_bytes(), 150));
    }
    
    /**
     * Sets all the fields editable
     * @param bool, the boolean to set the fields editable to
     */
    public void setFieldsEditable(boolean bool) {
        filenameField.setEditable(bool);
        titleField.setEditable(bool);
        artistField.setEditable(bool);
        albumField.setEditable(bool);
        albumArtistField.setEditable(bool);
        yearField.setEditable(bool);
        genreField.setEditable(bool);
        track1Field.setEditable(bool);
        track2Field.setEditable(bool);
        disk1Field.setEditable(bool);
        disk2Field.setEditable(bool);
        lengthField.setEditable(bool);
        bitrateField.setEditable(bool);
        sampleRateField.setEditable(bool);
        commentField.setEditable(bool);
    }
    
    /**
     * Submits the changes of the editing
     */
    public void submit() {
        if (edited) {
            Main.frame.submitChangesFromInfoFrame(
                    filenameField.getText().replace(".mp3", StringUtils.EMPTY),
                    titleField.getText(),
                    artistField.getText(),
                    albumField.getText(),
                    albumArtistField.getText(),
                    yearField.getText(),
                    genreField.getText(),
                    track1Field.getText() + "/" + track2Field.getText(),
                    disk1Field.getText() + "/" + disk2Field.getText(),
                    commentField.getText());
        }
        this.edited = false;
    }
    
    /**
     * Shows the popup when you click on an album image
     *
     * @param e
     */
    void showArtworkPopup(MouseEvent e) {
        JPopupMenu popup = new JPopupMenu();
        JMenuItem item;
        popup.add(item = new JMenuItem("Add"));
        item.addActionListener(menuListener);
        popup.add(item = new JMenuItem("Remove"));
        item.addActionListener(menuListener);

        popup.show(e.getComponent(), e.getX(), e.getY());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(InfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(InfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(InfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(InfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            //new InfoFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField albumArtistField;
    private javax.swing.JTextField albumField;
    private javax.swing.JTextField artistField;
    private javax.swing.JTextField bitrateField;
    private javax.swing.JTextArea commentField;
    private javax.swing.JLabel coverLabel;
    private javax.swing.JTextField disk1Field;
    private javax.swing.JTextField disk2Field;
    private javax.swing.JButton editSubmitButton;
    private javax.swing.JLabel editedLabel;
    private javax.swing.JTextField filenameField;
    private javax.swing.JTextField genreField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField lengthField;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JTextField sampleRateField;
    private javax.swing.JTextField titleField;
    private javax.swing.JTextField track1Field;
    private javax.swing.JTextField track2Field;
    private javax.swing.JTextField yearField;
    // End of variables declaration//GEN-END:variables
}
