/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package moose;

import com.mpatric.mp3agic.ID3v2;
import com.mpatric.mp3agic.ID3v24Tag;
import com.mpatric.mp3agic.InvalidDataException;
import com.mpatric.mp3agic.Mp3File;
import com.mpatric.mp3agic.UnsupportedTagException;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author pat
 */
public class AuditFrame extends javax.swing.JFrame {

    // some ivars
    int auditCount;
    ArrayList<File> albums = new ArrayList<>();
    File auditFolder;
    File currentDir;
    boolean auditInProgress = false;

    // logger object
    Logger logger = new Logger();

    // Arraylist for files found
    ArrayList<ArrayList<String>> filePathList = new ArrayList<>(Arrays.asList(
            new ArrayList<>(),      // mp3.asd
            new ArrayList<>(),      // flac
            new ArrayList<>(),      // wav
            new ArrayList<>(),      // zip
            new ArrayList<>(),      // image files
            new ArrayList<>(),      // windows files
            new ArrayList<>()));    // other files

    /**
     * Creates new form AuditFrame
     */
    public AuditFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        auditPanel = new javax.swing.JPanel();
        previousFolderButton = new javax.swing.JButton();
        nextFolderButton = new javax.swing.JButton();
        ID3TagCheck = new javax.swing.JLabel();
        filenameCheck = new javax.swing.JLabel();
        coverArtCheck = new javax.swing.JLabel();
        label3 = new javax.swing.JLabel();
        label4 = new javax.swing.JLabel();
        label5 = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        currentDirLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        analyzeButton = new javax.swing.JButton();
        clearResultsButton = new javax.swing.JButton();
        label6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        mp3asdCheckBox = new javax.swing.JCheckBox();
        wavCheckBox = new javax.swing.JCheckBox();
        flacCheckBox = new javax.swing.JCheckBox();
        zipCheckBox = new javax.swing.JCheckBox();
        windowsCheckBox = new javax.swing.JCheckBox();
        everythingElseCheckBox = new javax.swing.JCheckBox();
        imagesCheckBox = new javax.swing.JCheckBox();
        viewResultsButton = new javax.swing.JButton();
        deleteAllButton = new javax.swing.JButton();
        deleteSelectedButton = new javax.swing.JButton();
        chooseFolderButton = new javax.swing.JButton();
        pathLabel = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Audit Music");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        previousFolderButton.setText("<-- Previous");
        previousFolderButton.setEnabled(false);
        previousFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousFolderButtonActionPerformed(evt);
            }
        });

        nextFolderButton.setText("Save & Next -->");
        nextFolderButton.setEnabled(false);
        nextFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFolderButtonActionPerformed(evt);
            }
        });

        ID3TagCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        filenameCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        coverArtCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        label3.setText("Every file has necessary ID3Tag information");
        label3.setEnabled(false);

        label4.setText("Filenames all match standard");
        label4.setEnabled(false);

        label5.setText("Has cover art associated with the folder");
        label5.setEnabled(false);

        label2.setText("Current Folder:");
        label2.setEnabled(false);

        startButton.setText("Start Audit");
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop Audit");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        currentDirLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        currentDirLabel.setText(" ");
        currentDirLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        currentDirLabel.setMaximumSize(new java.awt.Dimension(17, 339));
        currentDirLabel.setMinimumSize(new java.awt.Dimension(17, 339));
        currentDirLabel.setPreferredSize(new java.awt.Dimension(17, 339));

        javax.swing.GroupLayout auditPanelLayout = new javax.swing.GroupLayout(auditPanel);
        auditPanel.setLayout(auditPanelLayout);
        auditPanelLayout.setHorizontalGroup(
            auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(auditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentDirLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(auditPanelLayout.createSequentialGroup()
                        .addComponent(coverArtCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(auditPanelLayout.createSequentialGroup()
                        .addComponent(ID3TagCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE))
                    .addGroup(auditPanelLayout.createSequentialGroup()
                        .addComponent(filenameCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, auditPanelLayout.createSequentialGroup()
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(auditPanelLayout.createSequentialGroup()
                        .addComponent(label2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(auditPanelLayout.createSequentialGroup()
                        .addComponent(previousFolderButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        auditPanelLayout.setVerticalGroup(
            auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, auditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(label2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, auditPanelLayout.createSequentialGroup()
                        .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ID3TagCheck, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filenameCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(coverArtCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                .addGroup(auditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabbedPane.addTab("Audit", auditPanel);

        analyzeButton.setText("Perform Analysis");
        analyzeButton.setEnabled(false);
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });

        clearResultsButton.setText("Clear");
        clearResultsButton.setEnabled(false);
        clearResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearResultsButtonActionPerformed(evt);
            }
        });

        label6.setText("Results:");
        label6.setEnabled(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setToolTipText("");

        resultsTextArea.setEditable(false);
        resultsTextArea.setColumns(20);
        resultsTextArea.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        resultsTextArea.setRows(5);
        resultsTextArea.setWrapStyleWord(true);
        resultsTextArea.setEnabled(false);
        jScrollPane1.setViewportView(resultsTextArea);

        mp3asdCheckBox.setText(".mp3.asd");
        mp3asdCheckBox.setEnabled(false);

        wavCheckBox.setText(".wav");
        wavCheckBox.setEnabled(false);

        flacCheckBox.setText(".flac");
        flacCheckBox.setEnabled(false);

        zipCheckBox.setText(".zip");
        zipCheckBox.setEnabled(false);

        windowsCheckBox.setText("Windows files");
        windowsCheckBox.setEnabled(false);

        everythingElseCheckBox.setText("Other files");
        everythingElseCheckBox.setEnabled(false);

        imagesCheckBox.setText("Images (Excludes cover art images, i.e. cover.*)");
        imagesCheckBox.setEnabled(false);

        viewResultsButton.setText("View Results");
        viewResultsButton.setEnabled(false);
        viewResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewResultsButtonActionPerformed(evt);
            }
        });

        deleteAllButton.setText("Delete All");
        deleteAllButton.setEnabled(false);
        deleteAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllButtonActionPerformed(evt);
            }
        });

        deleteSelectedButton.setText("Delete Selected");
        deleteSelectedButton.setEnabled(false);
        deleteSelectedButton.setMaximumSize(new java.awt.Dimension(97, 40));
        deleteSelectedButton.setMinimumSize(new java.awt.Dimension(97, 40));
        deleteSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imagesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(wavCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(mp3asdCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                    .addComponent(flacCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(windowsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(zipCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(everythingElseCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(152, 152, 152))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(analyzeButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(label6)
                                        .addGap(120, 120, 120)
                                        .addComponent(clearResultsButton))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(deleteAllButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteSelectedButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(viewResultsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(analyzeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label6)
                    .addComponent(clearResultsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(viewResultsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteSelectedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mp3asdCheckBox)
                    .addComponent(zipCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wavCheckBox)
                    .addComponent(windowsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flacCheckBox)
                    .addComponent(everythingElseCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(imagesCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Cleanup", jPanel2);

        chooseFolderButton.setText("Choose Folder...");
        chooseFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFolderButtonActionPerformed(evt);
            }
        });

        pathLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        pathLabel.setText(" ");
        pathLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        label1.setText("Audit/Cleanup Folder:");
        label1.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label1)
                    .addComponent(tabbedPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chooseFolderButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseFolderButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the next folder/album button press
     * @param evt
     */
    private void nextFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextFolderButtonActionPerformed
        nextAuditFolder();
    }//GEN-LAST:event_nextFolderButtonActionPerformed

    /**
     * Handles the previous folder/album button press
     * @param evt
     */
    private void previousFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousFolderButtonActionPerformed
        previousAuditFolder();
    }//GEN-LAST:event_previousFolderButtonActionPerformed

    /**
     * Handles the choose folder button press
     * @param evt
     */
    private void chooseFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFolderButtonActionPerformed
        chooseFolder();
        startButton.setEnabled(true);
        analyzeButton.setEnabled(true);
        importAlbums();
    }//GEN-LAST:event_chooseFolderButtonActionPerformed

    /**
     * Handles the start audit button press
     * @param evt
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        auditInProgress = true;
        startButton.setEnabled(false);
        stopButton.setEnabled(true);
        nextFolderButton.setEnabled(true);
        previousFolderButton.setEnabled(true);
        startAudit();
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * Handles the stop audit button press
     * @param evt
     */
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stopAudit();
        resetAuditFrame();
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * Handles the clear button press, which clears the results text area
     * @param evt
     */
    private void clearResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearResultsButtonActionPerformed
        resultsTextArea.setText("");
    }//GEN-LAST:event_clearResultsButtonActionPerformed

    /**
     * Handles the analyze button press
     * @param evt
     */
    private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
        clearResultsButton.setEnabled(true);
        mp3asdCheckBox.setEnabled(true);
        flacCheckBox.setEnabled(true);
        wavCheckBox.setEnabled(true);
        zipCheckBox.setEnabled(true);
        windowsCheckBox.setEnabled(true);
        everythingElseCheckBox.setEnabled(true);
        imagesCheckBox.setEnabled(true);
        deleteAllButton.setEnabled(true);
        deleteSelectedButton.setEnabled(true);
        label6.setEnabled(true);
        resultsTextArea.setEnabled(true);

        analyze();
    }//GEN-LAST:event_analyzeButtonActionPerformed

    /**
     * Handles the delete all button press
     * @param evt
     */
    private void deleteAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllButtonActionPerformed
        deleteAll();
    }//GEN-LAST:event_deleteAllButtonActionPerformed

    /**
     * Handles the delete selected button press
     * @param evt
     */
    private void deleteSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedButtonActionPerformed
        deleteSelected();
    }//GEN-LAST:event_deleteSelectedButtonActionPerformed

    /**
     * Handles the view results button press
     * @param evt
     */
    private void viewResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewResultsButtonActionPerformed
        try {
            Desktop desktop = Desktop.getDesktop();
            File results = new File(logger.appSupportPath + "cleanupresults.txt");
            if (results.exists()) {
                desktop.open(results);
            } else {
                logger.logError("Tried to open the cleanup results, but the file doesn't exist!");
            }
        } catch (IOException ex) {
            Main.logger.logError("Couldn't open the event log!", ex);
        }
    }//GEN-LAST:event_viewResultsButtonActionPerformed

    /**
     * Refreshes the three checks and the current directory when a new album is loaded
     */
    public void refreshAuditFrame() {
        if (checkID3Tags()) {
            ID3TagCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/check2.png")));
        } else {
            ID3TagCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/error.png")));
        }
        if (checkFilenames()) {
            filenameCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/check2.png")));
        } else {
            filenameCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/error.png")));
        }
        if (checkFolderCover()) {
            coverArtCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/check2.png")));
        } else {
            coverArtCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/error.png")));
        }
        currentDirLabel.setText(currentDir.getPath());
    }

    /**
     * Function to get the folder to audit and sets the auditFolder ivar
     */
    public void chooseFolder() {

        // use a filechooser to open the folder full of stuff
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);

        // result of filechoosing
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            auditFolder = fc.getSelectedFile();
            label1.setEnabled(true);
            pathLabel.setText(auditFolder.getPath());
        }
    }

    /**
     * Creates a master list of files from the audit folder, then imports all the albums into the albums ivar list
     */
    public void importAlbums() {

        // arraylist to store all the files
        ArrayList<File> allFiles = new ArrayList<>();
        allFiles = Main.frame.listFiles(auditFolder, allFiles);

        // traverse the list of files and add the albums to the albums ivar list
        for (File file : allFiles) {
            if (file.getName().endsWith(".mp3")) {
                File a = file.getParentFile();

                // folder is a multi-disk album
                if (a.getName().equals("CD1") || a.getName().equals("CD2")) {
                    a = a.getParentFile();
                }
                if (!albums.contains(a)) {
                    albums.add(a);
                }
            }
        }

        // sort them alphabetically
        if (!logger.libraryLocation.equals("") || logger.libraryLocation != null) {
            Collections.sort(albums, (File o1, File o2) -> {
                //String filename1 = o1.getPath().replace("/Users/pat/Music/Library/", "");
                //String filename2 = o2.getPath().replace("/Users/pat/Music/Library/", "");
                //String filename1 = o1.getPath().replace(logger.libraryLocation, "");
                //String filename2 = o2.getPath().replace(logger.libraryLocation, "");
                String filename1 = o1.getPath().replace(auditFolder.getPath(), "");
                String filename2 = o2.getPath().replace(auditFolder.getPath(), "");
                return filename1.compareToIgnoreCase(filename2);
            });
        } else {

        }
    }

    /**
     * Called from the start audit button press
     * Checks if an audit is already in process first, then user decides to either start a new audit or continue that existing audit
     */
    public void startAudit() {

        // check for an audit in process
        if (checkForExisitingAudit()) {
            Object[] options = new Object[]{"Cancel", "Start New", "Continue"};
            int returnVal = JOptionPane.showOptionDialog(this, "An exisiting audit is in process, do you want to continue?", "Existing audit found", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, options, null);
            switch (returnVal) {
                case 2:     // continue
                    continueAudit();
                    break;
                case 1:     // start a new one
                    newAudit();
                    break;
                default:
                    // do nothing
                    break;
            }
        } else {
            // existing audit not found, start a fresh one
            newAudit();
        }
    }

    /**
     * Start a brand new audit
     */
    public void newAudit() {

        // update graphics
        label3.setEnabled(true);
        label4.setEnabled(true);
        label5.setEnabled(true);

        // clear any residual files
        clearDoneFiles();

        // set some ivars
        auditCount = 0;
        currentDir = albums.get(auditCount);

        // sets up the audit frame with the three checks
        refreshAuditFrame();

        // open up a new Frame with the album preloaded
        Main.frame.dispose();
        Main.frame = new Frame(albums.get(auditCount));
        Main.launchFrame();
    }

    /**
     * Continue an existing audit
     */
    public void continueAudit() {

        // update graphics
        label3.setEnabled(true);
        label4.setEnabled(true);
        label5.setEnabled(true);

        // set some ivars
        auditCount = getNextAlbum();
        currentDir = albums.get(auditCount);

        // refreshes the audit frame with the three checks
        refreshAuditFrame();

        // open up a new Frame with the next album preloaded
        Main.frame.dispose();
        Main.frame = new Frame(currentDir);
        Main.launchFrame();
    }

    /**
     * Goes to the next audit album/folder
     */
    public void nextAuditFolder() {

        // sets the current album as done
        if (!checkIfDone(albums.get(auditCount))) {
            setDone(albums.get(auditCount));
        }

        // update the ivar
        auditCount++;

        // save the tracks here instead of forcing the user to save it in the main frame form
        Main.frame.saveAll();

        // check if the audit is done
        if (auditCount < albums.size()) {

            // refresh the frame with the new album and the checks
            currentDir = albums.get(auditCount);
            refreshAuditFrame();

            // close the current frame and open a new one with the new album preloaded
            Main.frame.dispose();
            Main.frame = new Frame(currentDir);
            Main.launchFrame();
            this.requestFocus();
        } else {
            // audit is done
            finishAudit();
        }
    }

    /**
     * Goes to the previous album/folder
     */
    public void previousAuditFolder() {

        // sets the current album as done
        if (!checkIfDone(albums.get(auditCount))) {
            setDone(albums.get(auditCount));
        }

        // prevent a negative auditCount
        if (auditCount <= 0) {
            // do nothing
        } else {

            // update ivars
            auditCount--;
            currentDir = albums.get(auditCount);

            // refresh the frame with the new album and the checks
            refreshAuditFrame();
            Main.frame.dispose();
            Main.frame = new Frame(currentDir);
            Main.launchFrame();
            this.requestFocus();
        }
    }

    /**
     * Stops the audit
     */
    public void stopAudit() {
        albums.clear();
        Main.frame.dispose();
        Main.frame = new Frame();
        Main.launchFrame();
    }

    /**
     * Finishes the audit
     */
    public void finishAudit() {

        // set some ivars
        albums.clear();
        auditCount = 0;
        auditInProgress = false;

        // launch a blank mainframe
        Main.frame.dispose();
        Main.frame = new Frame();
        Main.launchFrame();

        // reset the audit frame
        resetAuditFrame();

        // show that audit is done
        JOptionPane.showMessageDialog(null, "Audit is complete!", "Audit Completed", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Sets the audit frame back to disabled
     */
    public void resetAuditFrame() {
        label1.setEnabled(false);
        label2.setEnabled(false);
        label3.setEnabled(false);
        label4.setEnabled(false);
        label5.setEnabled(false);
        ID3TagCheck.setIcon(null);
        filenameCheck.setIcon(null);
        coverArtCheck.setIcon(null);
        previousFolderButton.setEnabled(false);
        nextFolderButton.setEnabled(false);
        currentDirLabel.setText("");
        pathLabel.setText("");
        startButton.setEnabled(false);
        stopButton.setEnabled(false);
        this.requestFocus();
    }

    /**
     * Deletes all files in the filePathList arraylist
     */
    public void deleteAll() {
        for (ArrayList list : filePathList) {
            deleteAllFilesInList(list);
        }
        // reset the statistics
        analyze();
    }

    /**
     * Deletes only the checked file types
     */
    public void deleteSelected() {
        if(mp3asdCheckBox.isSelected()) {
            deleteAllFilesInList(filePathList.get(0));
        }
        if(flacCheckBox.isSelected()) {
            deleteAllFilesInList(filePathList.get(1));
        }
        if(wavCheckBox.isSelected()) {
            deleteAllFilesInList(filePathList.get(2));
        }
        if(zipCheckBox.isSelected()) {
            deleteAllFilesInList(filePathList.get(3));
        }
        if(imagesCheckBox.isSelected()) {
            deleteAllFilesInList(filePathList.get(4));
        }
        if(windowsCheckBox.isSelected()) {
            deleteAllFilesInList(filePathList.get(5));
        }
        if(everythingElseCheckBox.isSelected()) {
            deleteAllFilesInList(filePathList.get(6));
        }
        // reset the statistics
        analyze();
    }

    /**
     * Helper function used to delete files in a specific list
     * @param list
     */
    public void deleteAllFilesInList(ArrayList<String> list) {
        for (String path : list) {
            File file = new File(path);
            if(file.exists()) {
                file.delete();
            } else {
                logger.logError("Tried to delete file in cleanup, but couldn't!");
            }
        }
    }

    /**
     * Checks to see if in the audit folder there exists a done file in any of its subfolders
     * @return the result of the check, true for existing audit, false for no existing audit
     */
    public boolean checkForExisitingAudit() {
        return albums.stream().anyMatch((album) -> (containsFile(album)));
    }

    /**
     * Helper function used to see if there's a done file in the specified folder
     * @param dir, the directory to check
     * @return the result of the search, true for file found, false for file not found
     */
    public boolean containsFile(File dir) {
        File[] filesInAlbum = dir.listFiles();
        for (File file : filesInAlbum) {
            if (file.getName().equals("done")) {
                return true;
            }
        }
        return false;
    }

    /**
     * Function used to create a done file in the specified folder
     * @param dir, the directory to create the file in
     */
    public void setDone(File dir) {
        String path = dir.getPath() + "/done";
        File done = new File(path);
        try {
            done.createNewFile();
        } catch (IOException ex) {
            Main.logger.logError("Error creating done file for auditing in folder: " + path, ex);
        }
    }

    /**
     * Checks if that specified directory/album is done
     * @param dir, the directory to check
     * @return the result of the check, true for done, false for not done
     */
    public boolean checkIfDone(File dir) {
        File[] files = dir.listFiles();
        for (File file : files) {
            if (file.getName().equals("done")) {
                return true;
            }
        }
        return false;
    }

    /**
     * Gets the next album index in the albums arraylist
     * @return the int index of that album
     */
    public int getNextAlbum() {
        for (File album : albums) {
            if (!checkIfDone(album)) {
                return albums.indexOf(album);
            }
        }
        return -1;
    }

    /**
     * Function used to clear all of the done files from the albums list
     */
    public void clearDoneFiles() {
        albums.stream().filter((album) -> (containsFile(album))).map((album) -> album.listFiles()).forEachOrdered((files) -> {
            for (File file : files) {
                if (file.getName().equals("done")) {
                    file.delete();
                }
            }
        });
    }

    /**
     * Checks the album/folder for a cover.* file (image file)
     * @return the result of the check, true for a cover file exists, false for a cover file doesn't exist
     */
    private boolean checkFolderCover() {

        // check if there's an audit in progress first
        if (!auditInProgress) {
            return false;
        }

        // check the current directory ivar
        File[] files = currentDir.listFiles();
        for (File file : files) {
            if (file.getName().startsWith("cover")) {
                return true;
            }
        }
        return false;
    }

    /**
     * Checks all the files in a folder for the standardized file name
     * @return the result of the check, true if all files are good, false if one or more doesn't match
     */
    private boolean checkFilenames() {

        // check if there's an audit in progress first
        if (!auditInProgress) {
            return false;
        }

        // create a list of all files from that directory
        ArrayList<File> files = new ArrayList<>();
        files = Main.frame.listFiles(currentDir, files);

        // regex to check
        String regex = "\\d\\d ((.)*)";

        // check all files in that list
        // also checks if the album artist is a label, since those files aren't formatted the same
        for (File file : files) {
            if (file.getName().endsWith(".mp3")) {
                if (!file.getName().matches(regex) && !isLabel(file)) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Checks all the mp3s in a folder for all the necessary id3 tags
     * @return the result of the check, true if all mp3s are good, false if one or more doesn't have all information needed
     */
    private boolean checkID3Tags() {

        // check if there's an audit in progress first
        if (!auditInProgress) {
            return false;
        }

        // create a list of all files from that directory
        ArrayList<File> files = new ArrayList<>();
        files = Main.frame.listFiles(currentDir, files);

        // traverse the file list
        for (File file : files) {

            // check if it's an mp3
            if (file.getName().endsWith(".mp3")) {

                // mp3agic Mp3File object, used for the id3tags
                Mp3File mp3file;
                try {
                    // create the mp3file from the file's path
                    mp3file = new Mp3File(file.getAbsolutePath());

                    // if the mp3file doesn't have an id3tag
                    if (!mp3file.hasId3v2Tag()) {
                        return false;
                    }
                } catch (IOException | UnsupportedTagException | InvalidDataException ex) {
                    logger.logError("Exception when checking if an mp3 has id3 information!", ex);
                    mp3file = null;
                }

                // get the id3v2 info
                String title = mp3file.getId3v2Tag().getTitle();
                String artist = mp3file.getId3v2Tag().getArtist();
                String album = mp3file.getId3v2Tag().getAlbum();
                String albumartist = mp3file.getId3v2Tag().getAlbumArtist();
                String genre = mp3file.getId3v2Tag().getGenreDescription();
                String year = mp3file.getId3v2Tag().getYear();
                String track = mp3file.getId3v2Tag().getTrack();
                String disk = mp3file.getId3v2Tag().getPartOfSet();
                byte[] artwork_bytes = mp3file.getId3v2Tag().getAlbumImage();

                // check if it's a label, since those mp3s don't need as much information
                if (isLabel(currentDir)) {
                    if (title == null
                            || artist == null
                            || album == null
                            || albumartist == null
                            || genre == null
                            || artwork_bytes == null) {
                        return false;
                    }
                } else {
                    if (title == null
                            || artist == null
                            || album == null
                            || albumartist == null
                            || genre == null
                            || year == null
                            || track == null
                            || disk == null
                            || artwork_bytes == null) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    /**
     * Check if a directory is from a label
     * @param dir, the directory to check
     * @return the result of the check, true if it is a label, false if it isn't a label
     */
    public boolean isLabel(File dir) {
        String path = dir.getPath();
        return path.contains("/Genres/");
    }

    /**
     * Larger function used to check all the files in the auditFolder for any files that don't really belong
     */
    public void analyze() {

        // let's count the mp3s, cause why not
        int mp3Count = 0;

        // create a list of all files from that directory
        ArrayList<File> files = new ArrayList<>();
        files = Main.frame.listFiles(auditFolder, files);

        // traverse that list
        for (File file : files) {

            // get the filename to check
            String filename = file.getName();

            // check the ending/extension
            // add it to the specified sublist
            if (filename.endsWith(".mp3")) {
                mp3Count++;
            } else if (filename.endsWith(".mp3.asd")) {
                filePathList.get(0).add(file.getPath());
            } else if (filename.endsWith(".flac")) {
                filePathList.get(1).add(file.getPath());
            } else if (filename.endsWith(".wav")) {
                filePathList.get(2).add(file.getPath());
            } else if (filename.endsWith(".zip")) {
                filePathList.get(3).add(file.getPath());
            } else if ((filename.endsWith(".png") || filename.endsWith(".jpg") || filename.endsWith(".jpeg") || filename.endsWith(".JPG"))
                    && !filename.startsWith("cover.")
                    && !file.getParentFile().getName().equals("artwork")) {
                filePathList.get(4).add(file.getPath());
            } else if (filename.equals("Thumbs.db") || filename.startsWith("folder.")) {
                filePathList.get(5).add(file.getPath());
            } else {
                if (!(filename.endsWith(".png") || filename.endsWith(".jpg") || filename.endsWith(".jpeg") || filename.endsWith(".JPG")) 
                        && !filename.equals("done") 
                        && !filename.equals(".DS_Store")) {
                    filePathList.get(6).add(file.getPath());
                }
            }
        }

        // update the results
        resultsTextArea.setText(
                  "MP3 Files:     " + mp3Count + "\n"
                + "ZIP Files:     " + filePathList.get(3).size() + "\n"
                + "ASD Files:     " + filePathList.get(0).size() + "\n"
                + "WAV Files:     " + filePathList.get(2).size() + "\n"
                + "FLAC Files:    " + filePathList.get(1).size() + "\n"
                + "Image Files:   " + filePathList.get(4).size() + "\n"
                + "Windows Files: " + filePathList.get(5).size() + "\n"
                + "Other Files:   " + filePathList.get(6).size()
        );

        // export all those results to a text file for viewing
        exportResults();

        // enable the button used for viewing now that we have results
        viewResultsButton.setEnabled(true);
    }

    /**
     * Function used to export the results to a text file
     */
    public void exportResults() {

        // let's use a BufferedWriter because BufferedWriters are buff
        BufferedWriter bw = null;
        try {
            // get the app support path from the logger object
            bw = new BufferedWriter(new FileWriter(logger.appSupportPath + "cleanupResults.txt"));
            bw.write("\n");
            
            // zip files
            bw.write("\tZIP FILES:\n");
            bw.write("\n");
            for (String str : filePathList.get(3)) {
                bw.write("\t\t" + str + "\n");
            }
            bw.write("\n");
            
            // mp3.asd files
            bw.write("\tMP3.ASD FILES:\n");
            bw.write("\n");
            for (String str : filePathList.get(0)) {
                bw.write("\t\t" + str + "\n");
            }
            bw.write("\n");
            
            // wav files
            bw.write("\tWAV FILES:\n");
            bw.write("\n");
            for (String str : filePathList.get(2)) {
                bw.write("\t\t" + str + "\n");
            }
            bw.write("\n");
            
            // flac files
            bw.write("\tFLAC FILES:\n");
            bw.write("\n");
            for (String str : filePathList.get(1)) {
                bw.write("\t\t" + str + "\n");
            }
            bw.write("\n");
            
            // image files
            bw.write("\tIMAGE FILES:\n");
            bw.write("\n");
            for (String str : filePathList.get(4)) {
                bw.write("\t\t" + str + "\n");
            }
            bw.write("\n");
            
            // mp3 asd files
            bw.write("\tWINDOWS FILES:\n");
            bw.write("\n");
            for (String str : filePathList.get(5)) {
                bw.write("\t\t" + str + "\n");
            }
            bw.write("\n");
            
            // mp3 asd files
            bw.write("\tOTHER FILES:\n");
            bw.write("\n");
            for (String str : filePathList.get(6)) {
                bw.write("\t\t" + str + "\n");
            }
            bw.write("\n");
            
        } catch (IOException ex) {
            logger.logError("Couldn't create the cleanupResults.txt file", ex);
        } finally {
            // close the bufferedwriter
            if(bw != null) {
                try {
                    bw.close();
                } catch (IOException ex) {
                    logger.logError("Couldn't close buffered writer stream", ex);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AuditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AuditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AuditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AuditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            //new AuditFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ID3TagCheck;
    private javax.swing.JButton analyzeButton;
    private javax.swing.JPanel auditPanel;
    private javax.swing.JButton chooseFolderButton;
    private javax.swing.JButton clearResultsButton;
    private javax.swing.JLabel coverArtCheck;
    private javax.swing.JLabel currentDirLabel;
    private javax.swing.JButton deleteAllButton;
    private javax.swing.JButton deleteSelectedButton;
    private javax.swing.JCheckBox everythingElseCheckBox;
    private javax.swing.JLabel filenameCheck;
    private javax.swing.JCheckBox flacCheckBox;
    private javax.swing.JCheckBox imagesCheckBox;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    private javax.swing.JLabel label4;
    private javax.swing.JLabel label5;
    private javax.swing.JLabel label6;
    private javax.swing.JCheckBox mp3asdCheckBox;
    private javax.swing.JButton nextFolderButton;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JButton previousFolderButton;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton viewResultsButton;
    private javax.swing.JCheckBox wavCheckBox;
    private javax.swing.JCheckBox windowsCheckBox;
    private javax.swing.JCheckBox zipCheckBox;
    // End of variables declaration//GEN-END:variables
}
