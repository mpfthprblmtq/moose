/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package moose;

import com.mpatric.mp3agic.ID3v2;
import com.mpatric.mp3agic.ID3v24Tag;
import com.mpatric.mp3agic.InvalidDataException;
import com.mpatric.mp3agic.Mp3File;
import com.mpatric.mp3agic.UnsupportedTagException;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.DefaultButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author pat
 */
public class AuditFrame extends javax.swing.JFrame {

    //Frame frame;
    int auditCount;
    ArrayList<File> albums = new ArrayList<>();
    File auditFolder;
    File currentDir;
    boolean auditInProgress = false;

    /**
     * Creates new form AuditFrame
     */
    public AuditFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextFolderButton = new javax.swing.JButton();
        previousFolderButton = new javax.swing.JButton();
        label1 = new javax.swing.JLabel();
        pathLabel = new javax.swing.JLabel();
        chooseFolderButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        label2 = new javax.swing.JLabel();
        currentDirLabel = new javax.swing.JLabel();
        label3 = new javax.swing.JLabel();
        label4 = new javax.swing.JLabel();
        label5 = new javax.swing.JLabel();
        ID3TagCheck = new javax.swing.JLabel();
        filenameCheck = new javax.swing.JLabel();
        coverArtCheck = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Audit Music");
        setResizable(false);

        nextFolderButton.setText("Save & Next -->");
        nextFolderButton.setEnabled(false);
        nextFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFolderButtonActionPerformed(evt);
            }
        });

        previousFolderButton.setText("<-- Previous");
        previousFolderButton.setEnabled(false);
        previousFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousFolderButtonActionPerformed(evt);
            }
        });

        label1.setText("Audit Folder:");
        label1.setEnabled(false);

        pathLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        pathLabel.setText(" ");
        pathLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        chooseFolderButton.setText("Choose Folder...");
        chooseFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFolderButtonActionPerformed(evt);
            }
        });

        startButton.setText("Start Audit");
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop Audit");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        label2.setText("Current Folder:");
        label2.setEnabled(false);

        currentDirLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        currentDirLabel.setText(" ");
        currentDirLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        label3.setText("Every file has necessary ID3Tag information");
        label3.setEnabled(false);

        label4.setText("Filenames all match standard");
        label4.setEnabled(false);

        label5.setText("Has cover art associated with the folder");
        label5.setEnabled(false);

        ID3TagCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        filenameCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        coverArtCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(label1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chooseFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(previousFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextFolderButton))
                    .addComponent(currentDirLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startButton)
                                .addGap(124, 124, 124)
                                .addComponent(stopButton))
                            .addComponent(label2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(ID3TagCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(coverArtCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(label5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(filenameCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chooseFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(label2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(currentDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ID3TagCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filenameCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coverArtCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextFolderButtonActionPerformed
        nextAuditFolder();
    }//GEN-LAST:event_nextFolderButtonActionPerformed

    private void previousFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousFolderButtonActionPerformed
        previousAuditFolder();
    }//GEN-LAST:event_previousFolderButtonActionPerformed

    private void chooseFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFolderButtonActionPerformed
        chooseFolder();
        startButton.setEnabled(true);
        importAlbums();
    }//GEN-LAST:event_chooseFolderButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        auditInProgress = true;
        startButton.setEnabled(false);
        stopButton.setEnabled(true);
        nextFolderButton.setEnabled(true);
        previousFolderButton.setEnabled(true);
        startAudit();
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stopAudit();
        resetAuditFrame();
    }//GEN-LAST:event_stopButtonActionPerformed

    public void refreshAuditFrame() {
        label3.setEnabled(true);
        label4.setEnabled(true);
        label5.setEnabled(true);
        if(checkID3Tags()) {
            ID3TagCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/check2.png")));
        } else {
            ID3TagCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/error.png")));
        }
        if(checkFilenames()) {
            filenameCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/check2.png")));
        } else {
            filenameCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/error.png")));
        }
        if(checkFolderCover()) {
            coverArtCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/check2.png")));
        } else {
            coverArtCheck.setIcon(new ImageIcon(this.getClass().getResource("/resources/error.png")));
        }
        currentDirLabel.setText(currentDir.getPath());
    }

    public void chooseFolder() {

        // use a filechooser to open the folder full of stuff
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);

        // result of filechoosing
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            auditFolder = fc.getSelectedFile();
            label1.setEnabled(true);
            pathLabel.setText(auditFolder.getPath());
        }
    }

    public void importAlbums() {
        ArrayList<File> allFiles = new ArrayList<>();
        allFiles = Main.frame.listFiles(auditFolder, allFiles);
        for (File file : allFiles) {
            if (file.getName().endsWith(".mp3")) {
                File a = file.getParentFile();

                // folder is a multi-disk album
                if (a.getName().equals("CD1") || a.getName().equals("CD2")) {
                    a = a.getParentFile();
                }
                if (!albums.contains(a)) {
                    albums.add(a);
                }
            }
        }
        Collections.sort(albums, (File o1, File o2) -> {
            String filename1 = o1.getPath().replace("/Users/pat/Music/Library/", "");
            String filename2 = o2.getPath().replace("/Users/pat/Music/Library/", "");
            return filename1.compareToIgnoreCase(filename2);
        });
    }

    public void startAudit() {

        if (checkForExisitingAudit()) {
            Object[] options = new Object[]{"Cancel", "Start New", "Continue"};
            int returnVal = JOptionPane.showOptionDialog(this, "An exisiting audit is in process, do you want to continue?", "Existing audit found", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, options, null);
            switch (returnVal) {
                case 2:     // continue
                    continueAudit();
                    break;
                case 1:     // start a new one
                    newAudit();
                    break;
                default:
                    // do nothing
                    break;
            }
        } else {
            newAudit();
        }

    }

    public void newAudit() {
        clearDoneFiles();
        auditCount = 0;
        currentDir = albums.get(auditCount);
        refreshAuditFrame();
        Main.frame.dispose();
        Main.frame = new Frame(albums.get(auditCount));
        Main.launchFrame();
    }

    public void continueAudit() {
        auditCount = getNextAlbum();
        currentDir = albums.get(auditCount);
        refreshAuditFrame();
        Main.frame.dispose();
        Main.frame = new Frame(currentDir);
        Main.launchFrame();
    }

    public void nextAuditFolder() {
        if (!checkIfDone(albums.get(auditCount))) {
            setDone(albums.get(auditCount));
        }
        auditCount++;
        Main.frame.saveAll();
        if (auditCount < albums.size()) {
            currentDir = albums.get(auditCount);
            refreshAuditFrame();

            Main.frame.dispose();
            Main.frame = new Frame(currentDir);
            Main.launchFrame();
            this.requestFocus();
        } else {
            // audit is done
            finishAudit();
        }
    }

    public void previousAuditFolder() {
        if (!checkIfDone(albums.get(auditCount))) {
            setDone(albums.get(auditCount));
        }

        if (auditCount <= 0) {
            // do nothing
        } else {
            auditCount--;
            currentDir = albums.get(auditCount);
            refreshAuditFrame();
            Main.frame.dispose();
            Main.frame = new Frame(currentDir);
            Main.launchFrame();
            this.requestFocus();
        }
    }

    public void stopAudit() {
        Main.frame.dispose();
        Main.frame = new Frame();
        Main.launchFrame();
    }

    public void finishAudit() {
        
        auditCount = 0;
        auditInProgress = false;
        
        // launch a blank mainframe
        Main.frame.dispose();
        Main.frame = new Frame();
        Main.launchFrame();
        
        // reset the audit frame
        resetAuditFrame();
        
        // show that audit is done
        JOptionPane.showMessageDialog(null, "Audit is complete!", "Audit Completed", JOptionPane.INFORMATION_MESSAGE);
    }
    
    public void resetAuditFrame() {
        label1.setEnabled(false);
        label2.setEnabled(false);
        label3.setEnabled(false);
        label4.setEnabled(false);
        label5.setEnabled(false);
        ID3TagCheck.setIcon(null);
        filenameCheck.setIcon(null);
        coverArtCheck.setIcon(null);
        previousFolderButton.setEnabled(false);
        nextFolderButton.setEnabled(false);
        currentDirLabel.setText("");
        pathLabel.setText("");
        startButton.setEnabled(false);
        stopButton.setEnabled(false);
        this.requestFocus();
    }

    public boolean checkForExisitingAudit() {
        return albums.stream().anyMatch((album) -> (containsFile(album)));
    }

    public boolean containsFile(File dir) {
        File[] filesInAlbum = dir.listFiles();
        for (File file : filesInAlbum) {
            if (file.getName().equals("done")) {
                return true;
            }
        }
        return false;
    }

    public void setDone(File dir) {
        String path = dir.getPath() + "/done";
        File done = new File(path);
        try {
            done.createNewFile();
        } catch (IOException ex) {
            Main.logger.logError("Error creating done file for auditing in folder: " + path, ex);
        }
    }

    public boolean checkIfDone(File dir) {
        File[] files = dir.listFiles();
        for (File file : files) {
            if (file.getName().equals("done")) {
                return true;
            }
        }
        return false;
    }

    public int getNextAlbum() {
        for (File album : albums) {
            if (!checkIfDone(album)) {
                return albums.indexOf(album);
            }
        }
        return -1;
    }

    public void clearDoneFiles() {
        albums.stream().filter((album) -> (containsFile(album))).map((album) -> album.listFiles()).forEachOrdered((files) -> {
            for (File file : files) {
                if (file.getName().equals("done")) {
                    file.delete();
                }
            }
        });
    }

    private boolean checkFolderCover() {

        if (!auditInProgress) {
            return false;
        }

        File[] files = currentDir.listFiles();
        for (File file : files) {
            if (file.getName().startsWith("cover")) {
                return true;
            }
        }
        return false;
    }

    private boolean checkFilenames() {

        if (!auditInProgress) {
            return false;
        }

        ArrayList<File> files = new ArrayList<>();
        files = Main.frame.listFiles(currentDir, files);

        String regex = "\\d\\d ((.)*)";

        for (File file : files) {
            if (file.getName().endsWith(".mp3")) {
                if (!file.getName().matches(regex) && !isLabel(file)) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean checkID3Tags() {

        if (!auditInProgress) {
            return false;
        }

        ArrayList<File> files = new ArrayList<>();
        files = Main.frame.listFiles(currentDir, files);

        for (File file : files) {

            if (file.getName().endsWith(".mp3")) {

                // mp3agic Mp3File object, used for the id3tags
                Mp3File mp3file;
                try {
                    // create the mp3file from the file's path
                    mp3file = new Mp3File(file.getAbsolutePath());

                    // if the mp3file doesn't have an id3tag, create one
                    if (!mp3file.hasId3v2Tag()) {
                        ID3v2 tag = new ID3v24Tag();
                        mp3file.setId3v2Tag(tag);
                    }
                } catch (IOException | UnsupportedTagException | InvalidDataException ex) {
                    // things borked
                    mp3file = null;
                }

                // get the id3v2 info
                String title = mp3file.getId3v2Tag().getTitle();
                String artist = mp3file.getId3v2Tag().getArtist();
                String album = mp3file.getId3v2Tag().getAlbum();
                String albumartist = mp3file.getId3v2Tag().getAlbumArtist();
                String genre = mp3file.getId3v2Tag().getGenreDescription();
                String year = mp3file.getId3v2Tag().getYear();
                String track = mp3file.getId3v2Tag().getTrack();
                String disk = mp3file.getId3v2Tag().getPartOfSet();
                byte[] artwork_bytes = mp3file.getId3v2Tag().getAlbumImage();

                if (isLabel(currentDir)) {
                    if (title == null
                            || artist == null
                            || album == null
                            || albumartist == null
                            || genre == null
                            || artwork_bytes == null) {
                        return false;
                    }
                } else {
                    if (title == null
                            || artist == null
                            || album == null
                            || albumartist == null
                            || genre == null
                            || year == null
                            || track == null
                            || disk == null
                            || artwork_bytes == null) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public boolean isLabel(File dir) {
        String path = dir.getPath();
        return path.contains("/Genres/");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AuditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AuditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AuditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AuditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            //new AuditFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ID3TagCheck;
    private javax.swing.JButton chooseFolderButton;
    private javax.swing.JLabel coverArtCheck;
    private javax.swing.JLabel currentDirLabel;
    private javax.swing.JLabel filenameCheck;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    private javax.swing.JLabel label4;
    private javax.swing.JLabel label5;
    private javax.swing.JButton nextFolderButton;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JButton previousFolderButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
